"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[6280],{9268:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=t(4848),i=t(8453);const o={},a=void 0,r={id:"Tutorials/UserInterface/OBC/ClassificationsTree",title:"ClassificationsTree",description:'window.open("https://thatopen.github.io/engine_ui-components/examples/ClassificationsTree")} >Go Full Screen',source:"@site/docs/Tutorials/UserInterface/OBC/ClassificationsTree.mdx",sourceDirName:"Tutorials/UserInterface/OBC",slug:"/Tutorials/UserInterface/OBC/ClassificationsTree",permalink:"/Tutorials/UserInterface/OBC/ClassificationsTree",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Searching",permalink:"/Tutorials/UserInterface/Core/Table/Searching"},next:{title:"ElementProperties",permalink:"/Tutorials/UserInterface/OBC/ElementProperties"}},l={},c=[{value:"Displaying elements grouping \ud83d\udce6",id:"displaying-elements-grouping-",level:2},{value:"\ud83d\udd96 Importing our Libraries",id:"-importing-our-libraries",level:3},{value:"\ud83d\udccb Initializing the UI",id:"-initializing-the-ui",level:3},{value:"\ud83c\udf0e Setting up a simple scene",id:"-setting-up-a-simple-scene",level:3},{value:"Managing your loaded models \ud83c\udfe2",id:"managing-your-loaded-models-",level:2},{value:"Setting up the components",id:"setting-up-the-components",level:3},{value:"Creating the classifications tree",id:"creating-the-classifications-tree",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",{style:{position:"relative"},children:[(0,s.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/ClassificationsTree"}),(0,s.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_ui-components/examples/ClassificationsTree"),children:"Go Full Screen"})]}),"\n",(0,s.jsx)(n.admonition,{title:"Source",type:"info",children:(0,s.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,s.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/main/packages/obc/src/components/tables/ClassificationsTree/example.ts",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"displaying-elements-grouping-",children:"Displaying elements grouping \ud83d\udce6"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["One of the greatest things we can make using BIM models is to group elements based on their properties. This has many use cases! Like grouping elements to check their collisions \ud83d\udca5, grouping elements based on their construction activities \ud83d\udd28, or grouping fininshed elements during the construction phase \u2705.\nOther than grouping the elements, the next most important thing is to show them to your user in an easy way... well, here is where it comes the ",(0,s.jsx)(n.code,{children:"ClassificationsTree"})," functional component!"]}),"\n",(0,s.jsx)(n.h3,{id:"-importing-our-libraries",children:"\ud83d\udd96 Importing our Libraries"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial, we will import:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"@thatopen/components to set up the barebone of our app."}),"\n",(0,s.jsx)(n.li,{children:"@thatopen/ui to add some simple and cool UI menus."}),"\n",(0,s.jsx)(n.li,{children:"@thatopen/ui-obc to add some cool pre-made UI menus for components."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import * as OBC from "@thatopen/components";\nimport * as BUI from "@thatopen/ui";\n// You have to import from "@thatopen/ui-obc"\nimport * as BUIC from "../..";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-initializing-the-ui",children:"\ud83d\udccb Initializing the UI"}),"\n",(0,s.jsx)(n.p,{children:"As always, let's first initialize the UI library. Remember you only have to do it once in your entire app."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"BUI.Manager.init();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a simple scene"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"We will start by creating a simple scene with a camera and a renderer. If you don't know how to set up a scene, you can check the Worlds tutorial."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const components = new OBC.Components();\n\nconst viewport = document.createElement("bim-viewport");\nviewport.name = "viewer";\n\nconst worlds = components.get(OBC.Worlds);\nconst world = worlds.create();\n\nconst sceneComponent = new OBC.SimpleScene(components);\nsceneComponent.setup();\nworld.scene = sceneComponent;\n\nconst rendererComponent = new OBC.SimpleRenderer(components, viewport);\nworld.renderer = rendererComponent;\n\nconst cameraComponent = new OBC.SimpleCamera(components);\nworld.camera = cameraComponent;\n\nviewport.addEventListener("resize", () => {\n  rendererComponent.resize();\n  cameraComponent.updateAspect();\n});\n\nconst viewerGrids = components.get(OBC.Grids);\nviewerGrids.create(world);\n\ncomponents.init();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"managing-your-loaded-models-",children:"Managing your loaded models \ud83c\udfe2"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"What else can we say? The task is really simple: we need to see a list of the loaded models in the app. Let's get into it!"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-the-components",children:"Setting up the components"}),"\n",(0,s.jsxs)(n.p,{children:["First of all, we're going to get the ",(0,s.jsx)(n.code,{children:"FragmentIfcLoader"})," from an existing components instance:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const ifcLoader = components.get(OBC.IfcLoader);\nawait ifcLoader.setup();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The step above is super important as none of the existing functional components setup any tool, they just get it as they are! So, if we don't setup the ",(0,s.jsx)(n.code,{children:"FragmentIfcLoader"})," then the wasm path is not going to be defined and an error will arise \ud83e\udd13. Just after we have setup the loader, let's then configure the ",(0,s.jsx)(n.code,{children:"FragmentManager"})," so any time a model is loaded it gets added to some world scene created before:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const fragmentsManager = components.get(OBC.FragmentsManager);\n"})}),"\n",(0,s.jsx)(n.p,{children:"If you want to get the resulted model every time a new model is loaded, you can subscribe to the following event anywhere in your app:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"fragmentsManager.onFragmentsLoaded.add((model) => {\n  if (world.scene) world.scene.three.add(model);\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-the-classifications-tree",children:"Creating the classifications tree"}),"\n",(0,s.jsx)(n.p,{children:"First things first, let's create an instance of the functional component, like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const [classificationsTree, updateClassificationsTree] =\n  BUIC.tables.classificationTree({\n    components,\n    classifications: [],\n  });\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have the classifications tree created, let's tell the ",(0,s.jsx)(n.code,{children:"FragmentsManager"})," that each time a model is loaded it needs to classify the model based on some conditions, but more importantly is that right after those classifications are made it needs to update the classifications tree!"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const classifier = components.get(OBC.Classifier);\n\nfragmentsManager.onFragmentsLoaded.add(async (model) => {\n  // This creates a classification system named "entities"\n  classifier.byEntity(model);\n\n  // This creates a classification system named "predefinedTypes"\n  await classifier.byPredefinedType(model);\n\n  // This classifications in the state of the classifications tree.\n  // Is an array with the classification systems to be shown.\n  // You can pass the system name directly, or an object with system and label keys.\n  // The system key is the name in the classifier, and the label is how you want it to be shown in the table.\n  const classifications = [\n    { system: "entities", label: "Entities" },\n    { system: "predefinedTypes", label: "Predefined Types" },\n  ];\n\n  updateClassificationsTree({ classifications });\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"classifications"})," value is just an array of the classification systems from the Classifier that you want to display in the user interface, where ",(0,s.jsx)(n.code,{children:"system"})," is the name in ",(0,s.jsx)(n.code,{children:"classifier.list"})," and ",(0,s.jsx)(n.code,{children:"label"})," is the name you want to use to display in the UI. Needless to say, the classifications need to be computed before they can be used on the tree.\nGreat! As we already told the UI when it needs to update, let's add the classifications tree to the HTML page. For it, let's create simple BIM panel component where we include the tree and also a pre-made IFC load button \ud83d\udc47"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create(() => {\n  const [loadIfcBtn] = BUIC.buttons.loadIfc({ components });\n\n  return BUI.html`\n   <bim-panel label="Classifications Tree">\n    <bim-panel-section label="Importing">\n      ${loadIfcBtn}\n    </bim-panel-section>\n    <bim-panel-section label="Classifications">\n      ${classificationsTree}\n    </bim-panel-section>\n   </bim-panel> \n  `;\n});\n'})}),"\n",(0,s.jsx)(n.p,{children:"Finally, let's append the BIM Panel to the page to see the classifications tree working \ud83d\ude09"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'const app = document.createElement("bim-grid");\napp.layouts = {\n  main: {\n    template: `\n      "panel viewport"\n      / 23rem 1fr\n    `,\n    elements: { panel, viewport },\n  },\n};\n\napp.layout = "main";\ndocument.body.append(app);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You've now a ready to go user interface that let's you show your model classifications. \ud83e\udd73"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);