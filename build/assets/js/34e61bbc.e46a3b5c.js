"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6258],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=r,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i=void 0,l={unversionedId:"Tutorials/FragmentManager",id:"Tutorials/FragmentManager",title:"FragmentManager",description:"\ud83e\uddf6 Managing Fragment Efficiently",source:"@site/docs/Tutorials/FragmentManager.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/FragmentManager",permalink:"/Tutorials/FragmentManager",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FragmentIfcLoader",permalink:"/Tutorials/FragmentIfcLoader"},next:{title:"FragmentPlans",permalink:"/Tutorials/FragmentPlans"}},s={},p=[{value:"\ud83e\uddf6 Managing Fragment Efficiently",id:"-managing-fragment-efficiently",level:3},{value:"\ud83e\udded Fragment Powerhouse",id:"-fragment-powerhouse",level:3},{value:"\ud83e\udde9 Add Fragment To Scene",id:"-add-fragment-to-scene",level:3},{value:"\ud83d\udce4 Storing Fragment",id:"-storing-fragment",level:3},{value:"\ud83d\uddc3\ufe0f Downloading Files",id:"\ufe0f-downloading-files",level:4},{value:"\ud83e\uddf9 Discard Fragment and Clean the Scene",id:"-discard-fragment-and-clean-the-scene",level:3}],c={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"-managing-fragment-efficiently"},"\ud83e\uddf6 Managing Fragment Efficiently"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Until recently, we had been adding 3D objects to the ",(0,r.kt)("strong",{parentName:"p"},"Scene")," with the traditional ",(0,r.kt)("inlineCode",{parentName:"p"},"scene.add")," API.\nWe will now use ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/ThatOpen/engine_fragment"},"Fragment"))," to work with large BIM models.\ud83c\udfd7\ufe0f\nFragment are faster and easier to use Geometric API, which reduces draw calls and speeds up the processing of 3D objects.\nIn this tutorial, we will load and render ",(0,r.kt)("inlineCode",{parentName:"p"},".frag")," files using ",(0,r.kt)("strong",{parentName:"p"},"Fragment Manager"),"."),(0,r.kt)("admonition",{title:"First, let's set up a simple scene!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"\ud83d\udc40 If you haven't started there, check out ",(0,r.kt)("a",{parentName:"p",href:"/Tutorials/SimpleScene"},"that tutorial first"),"!")),(0,r.kt)("h3",{id:"-fragment-powerhouse"},"\ud83e\udded Fragment Powerhouse"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Let's begin by including ",(0,r.kt)("a",{parentName:"p",href:"../api/classes/components.FragmentManager"},"Fragment Manager"),",\nwhich requires the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"component")," to be provided to it.\nIn terms of capabilities, Fragment Manager is a true powerhouse.\ud83c\udfed"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"let fragments = new OBC.FragmentManager(components);\n")),(0,r.kt)("p",null,"Let's also create a toolbar to create a simple GUI for the functions we'll create:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const toolbar = new OBC.Toolbar(components);\ncomponents.ui.addToolbar(toolbar);\n")),(0,r.kt)("h3",{id:"-add-fragment-to-scene"},"\ud83e\udde9 Add Fragment To Scene"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Using a single API, a Fragment can be quickly added to the scene.\nEverything else is taken care of by ",(0,r.kt)("inlineCode",{parentName:"p"},"fragment.load"),", which makes it easier to render a ",(0,r.kt)("strong",{parentName:"p"},"Fragment")," file.\ud83d\udcaa\ud83d\udcaa"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'async function loadFragments() {\nif(fragments.groups.length) return;\nconst file = await fetch("../../../resources/small.frag");\nconst data = await file.arrayBuffer();\nconst buffer = new Uint8Array(data);\nconst group = await fragments.load(buffer);\nconsole.log(group)\n// const scene = components.scene.get();\n// scene.add(model);\n}\nconst loadButton = new OBC.Button(components);\nloadButton.materialIcon = "download";\nloadButton.tooltip = "Load model";\ntoolbar.addChild(loadButton);\nloadButton.onClick.add(() => loadFragments());\n')),(0,r.kt)("admonition",{title:"Loading IFC files as Fragment",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You're probably wondering how IFC files can be loaded as Fragment.\nThe same approach can be used to load an IFC file with a fragment;\n",(0,r.kt)("a",{parentName:"p",href:"/Tutorials/FragmentIfcLoader"},"view its own tutorial")," for further information.")),(0,r.kt)("h3",{id:"-storing-fragment"},"\ud83d\udce4 Storing Fragment"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Fragment Manager")," provides us with option to export the Fragment we have used in our Scene.\nFragment are exported to ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob"},"Blob")),",\nwhich can be used to generate a File and then download it.\u2197\ufe0f\nLet's see how you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"fragment.export")," in your code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function exportFragments() {\nif(!fragments.groups.length) return;\nconst group = fragments.groups[0];\nconst data = fragments.export(group);\nconst blob = new Blob([data]);\nconst file = new File([blob], "small.frag");\ndownload(file);\n}\nconst exportButton = new OBC.Button(components);\nexportButton.materialIcon = "exit_to_app";\nexportButton.tooltip = "Export model";\ntoolbar.addChild(exportButton);\nexportButton.onClick.add(() => exportFragments());\n')),(0,r.kt)("h4",{id:"\ufe0f-downloading-files"},"\ud83d\uddc3\ufe0f Downloading Files"),(0,r.kt)("p",null,"We have created a small utility function which we will use to download the exported Fragment by passing the relevant file to it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function download(file) {\nconst link = document.createElement("a");\nlink.href = URL.createObjectURL(file);\nlink.download = file.name;\ndocument.body.appendChild(link);\nlink.click();\nlink.remove();\n}\n')),(0,r.kt)("admonition",{title:"Creating Dynamic URLs",type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"URL.createObjectURL()")," comes handy when you want to generate a URL for files that were generated programmatically.\nYou can read more about it ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL_static"},"here"),".")),(0,r.kt)("h3",{id:"-discard-fragment-and-clean-the-scene"},"\ud83e\uddf9 Discard Fragment and Clean the Scene"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"At some point, you will require to render numerous Fragment and discard them when not needed.\nYou can use ",(0,r.kt)("inlineCode",{parentName:"p"},"dispose()")," method which will remove the Fragment Meshes from the Scene.\u2702\ufe0f\nAfter using ",(0,r.kt)("inlineCode",{parentName:"p"},"fragments.dispose()"),", you should reinitialize ",(0,r.kt)("strong",{parentName:"p"},"Fragment Manager")," to maintain it's original state for further uses."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function disposeFragments() {\nfragments.dispose();\n}\nconst disposeButton = new OBC.Button(components);\ndisposeButton.materialIcon = "delete";\ndisposeButton.tooltip = "Delete model";\ntoolbar.addChild(disposeButton);\ndisposeButton.onClick.add(() => disposeFragments());\n')),(0,r.kt)("p",null,"Loading a .zip fragment that you have locally is also quite easy:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function importExternalFragment() {\nif(fragments.groups.length) return;\nconst input = document.createElement("input");\ninput.type = "file";\ninput.onchange = async () => {\nconst file = input.files[0];\nif(file.name.includes(".frag")) {\nconst url = URL.createObjectURL(file);\nconst result = await fetch(url);\nconst data = await result.arrayBuffer();\nconst buffer = new Uint8Array(data);\nfragments.load(buffer);\n}\ninput.remove();\n}\ninput.click();\n}\nconst openButton = new OBC.Button(components);\nopenButton.materialIcon = "folder_open";\nopenButton.tooltip = "Import model";\ntoolbar.addChild(openButton);\nopenButton.onClick.add(() => importExternalFragment());\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations")," \ud83c\udf89 on completing this short yet powerful tutorial!\nNow you can render or export Fragment files in your BIM Apps using ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"../api/classes/components.FragmentManager"},"Fragment Manager"))," \ud83c\udfaf\nLet's keep it up and check out another tutorial! \ud83c\udf93"),(0,r.kt)("iframe",{src:"https://thatopen.github.io/engine_components/src/fragments/FragmentManager/index.html"}))}d.isMDXComponent=!0}}]);