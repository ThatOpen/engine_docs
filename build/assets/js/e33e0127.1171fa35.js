"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5018],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||a;return t?i.createElement(h,r(r({ref:n},d),{},{components:t})):i.createElement(h,r({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<a;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5907:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=t(7462),o=(t(7294),t(3905));const a={},r=void 0,l={unversionedId:"Tutorials/Simple2DScene",id:"Tutorials/Simple2DScene",title:"Simple2DScene",description:"\ud83c\udfa8 Draw in 2D on top of 3D!",source:"@site/docs/Tutorials/Simple2DScene.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/Simple2DScene",permalink:"/Tutorials/Simple2DScene",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ShadowDropper",permalink:"/Tutorials/ShadowDropper"},next:{title:"SimpleClipper",permalink:"/Tutorials/SimpleClipper"}},s={},c=[{value:"\ud83c\udfa8 Draw in 2D on top of 3D!",id:"-draw-in-2d-on-top-of-3d",level:3},{value:"\ud83d\udc85 Creating the UI",id:"-creating-the-ui",level:3}],d={toc:c},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"-draw-in-2d-on-top-of-3d"},"\ud83c\udfa8 Draw in 2D on top of 3D!"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," component is an easy way to represent 2D data\nusing the same tools and API that you use for 3D. Using it is\nsuper simple: just create a new instance and you can start\nadding things to it!"),(0,o.kt)("admonition",{title:"Drawing 2D with THREE.js?",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Yes! 2D is just a specific case of 3D. So we can use exactly the same\nlibraries and tools to display 2D data easily.")),(0,o.kt)("p",null,"The first step is to create a instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const simple2dScene = new OBC.Simple2DScene(components);\n")),(0,o.kt)("p",null,"Great! Now we can start adding things to it, just like we would with the\n3D scene. We will create a cube some lights and a grid: \ud83d\udca1\ud83e\uddca"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const cube2 = new THREE.Mesh(boxGeometry, boxMaterial);\nconst scene2d = simple2dScene.get();\nscene2d.add(cube2);\nconst directionalLight2 = new THREE.DirectionalLight();\ndirectionalLight2.position.set(5, 10, 3);\ndirectionalLight2.intensity = 0.5;\nscene2d.add(directionalLight2);\nconst ambientLight2 = new THREE.AmbientLight();\nambientLight2.intensity = 0.5;\nscene2d.add(ambientLight2);\nconst frustum = new THREE.Frustum();\nconst canvasUI = simple2dScene.uiElement.get('container');\nconst canvas = canvasUI.domElement;\n// window.ondblclick = () => {\n//  simple2dScene.scaleY += 0.1;\n// }\n")),(0,o.kt)("h3",{id:"-creating-the-ui"},"\ud83d\udc85 Creating the UI"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," comes with a button to easily turn it on and off.\nLet's create a simple toolbar and add it to the scene:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const mainWindow = new OBC.FloatingWindow(components);\ncomponents.ui.add(mainWindow);\nmainWindow.visible = false;\nmainWindow.domElement.style.height = '20rem';\nmainWindow.addChild(simple2dScene.uiElement.get('container'));\nmainWindow.onResized.add(() => simple2dScene.grid.regenerate());\ncomponents.renderer.onAfterUpdate.add(() => {\nif (mainWindow.visible) {\nsimple2dScene.update();\n}\n});\nmainWindow.slots.content.domElement.style.padding = '0';\nmainWindow.slots.content.domElement.style.overflow = 'hidden';\nmainWindow.onResized.add(() => {\nconst { width, height } = mainWindow.containerSize;\nsimple2dScene.setSize(height, width);\n});\nmainWindow.domElement.style.width = '20rem';\nmainWindow.domElement.style.height = '20rem';\nmainWindow.onVisible.add(() => {\nif(mainWindow.visible) {\nconst { width, height } = mainWindow.containerSize;\nsimple2dScene.setSize(height, width);\nsimple2dScene.grid.regenerate()\n}\n})\nconst mainButton = new OBC.Button(components);\nmainButton.materialIcon = 'fact_check';\nmainButton.tooltip = '2D scene';\nmainButton.onClick.add(() => {\nmainWindow.visible = !mainWindow.visible;\n});\nconst mainToolbar = new OBC.Toolbar(components);\ncomponents.ui.addToolbar(mainToolbar);\nmainToolbar.addChild(mainButton);\n")),(0,o.kt)("p",null,"That's it! Great work. Now you can easily draw 2D graphics with the same\nAPI and expose them to your end users. \ud83e\udd73"),(0,o.kt)("iframe",{src:"https://thatopen.github.io/engine_components/src/core/Simple2DScene/index.html"}))}m.isMDXComponent=!0}}]);