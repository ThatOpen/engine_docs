"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5018],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5907:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const o={},a=void 0,l={unversionedId:"Tutorials/Simple2DScene",id:"Tutorials/Simple2DScene",title:"Simple2DScene",description:"\ud83c\udfa8 Draw in 2D on top of 3D!",source:"@site/docs/Tutorials/Simple2DScene.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/Simple2DScene",permalink:"/docs/Tutorials/Simple2DScene",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ShadowDropper",permalink:"/docs/Tutorials/ShadowDropper"},next:{title:"SimpleClipper",permalink:"/docs/Tutorials/SimpleClipper"}},c={},s=[{value:"\ud83c\udfa8 Draw in 2D on top of 3D!",id:"-draw-in-2d-on-top-of-3d",level:3},{value:"\ud83d\udc85 Creating the UI",id:"-creating-the-ui",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"-draw-in-2d-on-top-of-3d"},"\ud83c\udfa8 Draw in 2D on top of 3D!"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," component is an easy way to represent 2D data\nusing the same tools and API that you use for 3D. Using it is\nsuper simple: just create a new instance and you can start\nadding things to it!"),(0,i.kt)("admonition",{title:"Drawing 2D with THREE.js?",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Yes! 2D is just a specific case of 3D. So we can use exactly the same\nlibraries and tools to display 2D data easily.")),(0,i.kt)("p",null,"The first step is to create a instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const simple2dScene = new OBC.Simple2DScene(components);\n")),(0,i.kt)("p",null,"Great! Now we can start adding things to it, just like we would with the\n3D scene. We will create a cube some lights and a grid: \ud83d\udca1\ud83e\uddca"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const cube2 = new THREE.Mesh(boxGeometry, boxMaterial);\nconst scene2d = simple2dScene.get();\nscene2d.add(cube2);\nconst directionalLight2 = new THREE.DirectionalLight();\ndirectionalLight2.position.set(5, 10, 3);\ndirectionalLight2.intensity = 0.5;\nscene2d.add(directionalLight2);\nconst ambientLight2 = new THREE.AmbientLight();\nambientLight2.intensity = 0.5;\nscene2d.add(ambientLight2);\nconst grid2d = new THREE.GridHelper(1000, 1000);\ngrid2d.rotation.x = Math.PI / 2;\nscene2d.add(grid2d);\n")),(0,i.kt)("h3",{id:"-creating-the-ui"},"\ud83d\udc85 Creating the UI"),(0,i.kt)("hr",null),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Simple2DScene")," comes with a button to easily turn it on and off.\nLet's create a simple toolbar and add it to the scene:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const mainButton = simple2dScene.uiElement.get("main");\nconst mainToolbar = new OBC.Toolbar(components);\ncomponents.ui.addToolbar(mainToolbar);\nmainToolbar.addChild(mainButton);\n')),(0,i.kt)("p",null,"That's it! Great work. Now you can easily draw 2D graphics with the same\nAPI and expose them to your end users. \ud83e\udd73"),(0,i.kt)("iframe",{src:"https://ifcjs.github.io/components/src/core/Simple2DScene/index.html"}))}u.isMDXComponent=!0}}]);