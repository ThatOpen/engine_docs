"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[9967],{8209:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var o=t(4848),i=t(8453);const s={},a=void 0,c={id:"Tutorials/UserInterface/OBC/TopicsUI",title:"TopicsUI",description:'window.open("https://thatopen.github.io/engine_ui-components/examples/TopicsList")} >Go Full Screen',source:"@site/docs/Tutorials/UserInterface/OBC/TopicsUI.mdx",sourceDirName:"Tutorials/UserInterface/OBC",slug:"/Tutorials/UserInterface/OBC/TopicsUI",permalink:"/Tutorials/UserInterface/OBC/TopicsUI",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RelationsTree",permalink:"/Tutorials/UserInterface/OBC/RelationsTree"},next:{title:"\ud83d\udccb API",permalink:"/api/"}},l={},r=[{value:"Showing BCF Topics the Easy Way \u2728",id:"showing-bcf-topics-the-easy-way-",level:2},{value:"\ud83c\udfd7 Scaffolding the Application",id:"-scaffolding-the-application",level:3},{value:"\ud83c\udfe6 Loading a Model and Setting the BCFTopics",id:"-loading-a-model-and-setting-the-bcftopics",level:3},{value:"\ud83d\udd28 Displaying the Topics List in a Table",id:"-displaying-the-topics-list-in-a-table",level:3},{value:"\ud83d\udcc3 Using the Topics Form UI",id:"-using-the-topics-form-ui",level:3},{value:"\ud83c\udfab Creating a Custom Topic Panel",id:"-creating-a-custom-topic-panel",level:3},{value:"\u23ec Creating a Button to Download BCFs",id:"-creating-a-button-to-download-bcfs",level:3},{value:"\ud83e\udd45 Creating a Panel to Hold the Table",id:"-creating-a-panel-to-hold-the-table",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{style:{position:"relative"},children:[(0,o.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/TopicsList"}),(0,o.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_ui-components/examples/TopicsList"),children:"Go Full Screen"})]}),"\n",(0,o.jsx)(n.admonition,{title:"Source",type:"info",children:(0,o.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,o.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/main/packages/obc/src/components/tables/TopicsList/example.ts",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"showing-bcf-topics-the-easy-way-",children:"Showing BCF Topics the Easy Way \u2728"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Integration with BIM Collaboration Format is probably one of those features you want to have in your app sooner than later. Problem is, many UIs are needed (one to display the topics, another to create them, another to edit everything, etc). Well, hold tight as here you will learn all you need to know in order to use the power of UI Components to accomplish a fully working user interface for your next BCF integration!"}),"\n",(0,o.jsx)(n.h3,{id:"-scaffolding-the-application",children:"\ud83c\udfd7 Scaffolding the Application"}),"\n",(0,o.jsx)(n.p,{children:"First of all, let's import the dependencies we need to get this working:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"@thatopen/ui-obc to add some cool pre-made UI menus for components."}),"\n",(0,o.jsx)(n.li,{children:"@thatopen/ui to add some simple and cool UI menus."}),"\n",(0,o.jsx)(n.li,{children:"@thatopen/components to set up the barebone of our app."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as BUIC from "@thatopen/ui-obc";\nimport * as BUI from "@thatopen/ui";\nimport * as OBC from "@thatopen/components";\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Next, it's always necessary to initialize the core UI library no matter if you're using functional components from ",(0,o.jsx)(n.code,{children:"@thatopen/ui-obc"}),". Also, let's setup ",(0,o.jsx)(n.code,{children:"@thatopen/components"})," with the minimum things to get a ",(0,o.jsx)(n.a,{href:"/Tutorials/Components/Core/Worlds",children:"World"})," up and running to load models."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'BUI.Manager.init();\n\nconst viewport = document.createElement("bim-viewport");\n\nconst components = new OBC.Components();\n\nconst worlds = components.get(OBC.Worlds);\n\nconst world = worlds.create();\nconst sceneComponent = new OBC.SimpleScene(components);\nsceneComponent.setup();\nworld.scene = sceneComponent;\n\nconst rendererComponent = new OBC.SimpleRenderer(components, viewport);\nworld.renderer = rendererComponent;\n\nconst cameraComponent = new OBC.SimpleCamera(components);\nworld.camera = cameraComponent;\ncameraComponent.controls.setLookAt(10, 5.5, 5, -4, -1, -6.5);\n\nviewport.addEventListener("resize", () => {\n  rendererComponent.resize();\n  cameraComponent.updateAspect();\n});\n\ncomponents.init();\n\nconst grids = components.get(OBC.Grids);\ngrids.create(world);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-loading-a-model-and-setting-the-bcftopics",children:"\ud83c\udfe6 Loading a Model and Setting the BCFTopics"}),"\n",(0,o.jsx)(n.p,{children:"Just after setting up the world, let's programatically load a model \ud83d\udc47"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const ifcLoader = components.get(OBC.IfcLoader);\nawait ifcLoader.setup();\nconst file = await fetch(\n  "https://thatopen.github.io/engine_ui-components/resources/small.ifc",\n);\nconst buffer = await file.arrayBuffer();\nconst typedArray = new Uint8Array(buffer);\nconst model = await ifcLoader.load(typedArray);\nworld.scene.three.add(model);\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"You don't need to add the model into the scene to create topics! We just add it for demostration purposes."})}),"\n",(0,o.jsx)(n.p,{children:"Before creating the table to display topics to the user, let's do some initial setup of the BCFTopics component. If you're unsure about the basics of working with the BCFTopics component, first check the corresponding tutorial."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const users: BUIC.TopicUserStyles = {\n  "jhon.doe@example.com": {\n    name: "Jhon Doe",\n    picture:\n      "https://www.profilebakery.com/wp-content/uploads/2023/04/Profile-Image-AI.jpg",\n  },\n  "user_a@something.com": {\n    name: "User A",\n    picture:\n      "https://www.profilebakery.com/wp-content/uploads/2023/04/Portrait-Photography.jpg",\n  },\n  "user_b@something.com": {\n    name: "User B",\n    picture:\n      "https://www.profilebakery.com/wp-content/uploads/2023/04/AI-Portrait.jpg",\n  },\n};\n\nconst topics = components.get(OBC.BCFTopics);\n\n// We setup the component to create a list of users.\n// This list will appear automatically in the topics form.\n// The recommendation is always set an email (as per the BCF standard).\ntopics.setup({\n  users: new Set(Object.keys(users)),\n  labels: new Set(["Architecture", "Structure", "MEP"]),\n});\n\n// Add a default viewpoint to the topics each time they get created.\nconst viewpoints = components.get(OBC.Viewpoints);\ntopics.list.onItemSet.add(({ value: topic }) => {\n  const viewpoint = viewpoints.create(world);\n  topic.viewpoints.add(viewpoint.guid);\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"Once the BCFTopics component has been initialized, let's see how to setup a plug-n-play UI for it! The BIM Components UI package (@thatopen/ui-obc) comes with some UIs to support the usage of the BCFTopics component. Among the components you got:\n\ud83d\udc49 TopicsList: a table to display the topics created with the component (or the ones you choose to see).\n\ud83d\udc49 TopicForm: a form to create new or update existing topics.\n\ud83d\udc49 TopicComments: a table to display the list of comments for a single topic.\n\ud83d\udc49 TopicCommentsSection: an element to display the comments for a single topic and also a text area to add them.\n\ud83d\udc49 TopicInformationSection: an element to display the topic markup information and a button with the form included to update it.\n\ud83d\udc49 TopicRelationsSection: an element to display the topics related with another and the functionality to link them.\n\ud83d\udc49 TopicViewpointsSection: an element to display the topics viewpoints with the functionality create new or link existing viewpoints.\nIs entirely up to you what to use, but using them together gives you a ready to go UI with everything you need to have a production ready BCF integration in your BIM app! Let's start with the topics list table."}),"\n",(0,o.jsx)(n.h3,{id:"-displaying-the-topics-list-in-a-table",children:"\ud83d\udd28 Displaying the Topics List in a Table"}),"\n",(0,o.jsx)(n.p,{children:"The topics list table is the easiest way to display all topics created in the app using the BCFTopics component. Creating it is really simple, as you just need to write the following:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const [topicsList, updateTopicsList] = BUIC.tables.topicsList({\n  components,\n  dataStyles: { users },\n});\n\n// Let's make row selection possible so we can decide which topics to download.\ntopicsList.selectableRows = true;\n"})}),"\n",(0,o.jsx)(n.p,{children:"That's it. You don't need anything else other than creating an instance of the UI component and place it anywhere you want in the app. The table updates by it-self anytime a new topic has been created or modified!"}),"\n",(0,o.jsx)(n.h3,{id:"-using-the-topics-form-ui",children:"\ud83d\udcc3 Using the Topics Form UI"}),"\n",(0,o.jsx)(n.p,{children:"Let's now define a topic form so creating them is easier than ever:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const [topicForm, updateTopicForm] = BUIC.forms.topic({\n  components,\n  styles: { users },\n});\n\n// We won\'t add the form directly to the page, but will wrap it inside a dialog element to show it as a modal.\nconst topicsModal = BUI.Component.create<HTMLDialogElement>(() => {\n  return BUI.html`\n    <dialog class="form-dialog">\n     <bim-panel style="border-radius: var(--bim-ui_size-base); width: 22rem;">\n      ${topicForm}\n     </bim-panel> \n    </dialog>\n  `;\n});\n\ndocument.body.append(topicsModal);\n'})}),"\n",(0,o.jsx)(n.p,{children:"As the modal is already on the page, lets create a very simple button to display the modal on demand:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const showFormBtn = BUI.Component.create(() => {\n  const onClick = () => {\n    topicsModal.showModal();\n  };\n\n  return BUI.html`\n    <bim-button style="flex: 0" @click=${onClick} label="Create Topic" icon="material-symbols:task"></bim-button>\n  `;\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"The form component already includes the classic submit and cancel buttons. You can access them from the element by using querySelectors, but its more cumbersome than it should be. For that reason, the form state includes one callback for each button, so you decide what happens when they are clicked. In this case, the most logical thing is to close the modal when the user clicks them. Let's update the form state to include the callbacks:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"updateTopicForm({\n  onCancel: () => {\n    topicsModal.close();\n  },\n  onSubmit: () => {\n    // There is no need to create the topic, it happens automatically inside the form component.\n    topicsModal.close();\n  },\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Awesome! Topic form setup correctly \ud83d\ude0e"}),"\n",(0,o.jsx)(n.h3,{id:"-creating-a-custom-topic-panel",children:"\ud83c\udfab Creating a Custom Topic Panel"}),"\n",(0,o.jsx)(n.p,{children:"With the form set up, what if we use the topic panel to see it's full information? Typically, you will display the full information for one topic at the same time; in such case, you only need to create one topic panel component. However, you can create as many panels as you need. In this tutorial we will create one as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// You don\'t have to create this interface, it\'s made just for demonstration purposes.\n// This interface allows you to update the actions in each functional section of the topics UI.\n// This is great when you have an app with user permission settings.\ninterface TopicPanelActions {\n  information: Partial<BUIC.TopicInformationSectionActions>;\n  viewpoints: Partial<BUIC.TopicViewpointsSectionActions>;\n  relatedTopics: Partial<BUIC.TopicRelationsSectionActions>;\n  comments: Partial<BUIC.TopicCommentsSectionActions>;\n}\n\ninterface TopicPanelUI {\n  components: OBC.Components;\n  topic?: OBC.Topic;\n  styles?: Partial<BUIC.TopicStyles>;\n  actions?: Partial<TopicPanelActions>;\n  world?: OBC.World;\n}\n\n// By default, it doesn\'t know which topic to display, so will show a default message of not topic selected.\nconst [topicPanel, updateTopicPanel] = BUI.Component.create(\n  (state: TopicPanelUI) => {\n    const { components, topic, world, actions, styles } = state;\n\n    let topicSections: BUI.TemplateResult | undefined;\n    let missingTopicSection: BUI.TemplateResult | undefined;\n\n    if (topic) {\n      const [information] = BUIC.sections.topicInformation({\n        components,\n        topic,\n        actions: actions?.information,\n        styles,\n      });\n\n      const [viewpoints] = BUIC.sections.topicViewpoints({\n        components,\n        topic,\n        world,\n        actions: actions?.viewpoints,\n      });\n\n      const [relatedTopics] = BUIC.sections.topicRelations({\n        components,\n        topic,\n        actions: actions?.relatedTopics,\n      });\n\n      const [comments] = BUIC.sections.topicComments({\n        topic,\n        actions: actions?.comments,\n        styles: styles?.users,\n      });\n\n      const onReminderClick = () => {\n        // eslint-disable-next-line no-alert\n        window.alert(\n          `An email will be sent to ${topic.assignedTo}! (obviosuly not, this is just for demo purposes)`,\n        );\n      };\n\n      topicSections = BUI.html`\n        <bim-panel-section label="Information" icon="ph:info-bold">\n          ${information}\n        </bim-panel-section>\n        <bim-panel-section label="Comments" icon="majesticons:comment-line">\n          ${comments}\n        </bim-panel-section>\n        <bim-panel-section label="Viewpoints" icon="tabler:camera">\n          ${viewpoints}\n        </bim-panel-section>\n        <bim-panel-section label="Related Topics" icon="tabler:link">\n          ${relatedTopics}\n        </bim-panel-section>\n        \x3c!-- This is a custom section where you can add any functionality you like --\x3e\n        <bim-panel-section label="Communication" icon="tabler:link">\n          ${\n            topic.assignedTo\n              ? BUI.html`\n                <bim-button @click=${onReminderClick} label="Send Mail Reminder" icon="mingcute:send-fill"></bim-button> \n              `\n              : BUI.html`\n                <bim-label style="white-space: normal">The topic must have an assignee to use the communication tools. Update the topic with a new assignee!</bim-label>\n              `\n          }\n        </bim-panel-section>\n      `;\n    } else {\n      missingTopicSection = BUI.html`\n        <bim-panel-section label="Missing Topic" icon="material-symbols:chat-error">\n          ${!topic ? BUI.html`<bim-label>There is no topic to display in this panel!</bim-label>` : null}\n        </bim-panel-section> \n      `;\n    }\n\n    return BUI.html`\n      <bim-panel>\n        ${missingTopicSection}\n        ${topicSections}\n      </bim-panel> \n    `;\n  },\n  { components, world, styles: { users } },\n);\n\n// Lets update the topic panel in case the topic information gets update somewhere else in the app.\ntopics.list.onItemUpdated.add(() => updateTopicPanel());\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you're unsure about how to create custom functional UI components just like the panel above, take a look at the dedicated ",(0,o.jsx)(n.a,{href:"/Tutorials/UserInterface/Core/Component",children:"Component"})," tutorial."]})}),"\n",(0,o.jsx)(n.p,{children:"It looks scarier than what it actually is! We give you the functional pieces, then is entirely up to you how to stack them together to define your UIs. If we give you a pre-made panel with everything, it would be easier to implement but harder to customize. The way its made let you create a panel with all the functional pieces already working, but then you have the chance to keep adding custom UIs for other functionalities you may create on top of topics.\nWhen you know which topic data to display in the panel, then you can update the topic data component. What need to happen to update the topic data panel entirely depends on your app! However, the topics list table includes a callback that gets triggered each time a topic is clicked with a button located next to its title, lets use that in this case! For it, set the callback to update the topic panel with the clicked topic as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"updateTopicsList({\n  onTopicEnter: (topic) => {\n    updateTopicPanel({ topic });\n  },\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-creating-a-button-to-download-bcfs",children:"\u23ec Creating a Button to Download BCFs"}),"\n",(0,o.jsx)(n.p,{children:"To complete our BCF integration, let's create a button to download the topics created using the BCFTopics component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const downloadBtn = BUI.Component.create(() => {\n  const onDownload = async () => {\n    const selectedTopics = [...topicsList.selection]\n      .map(({ Guid }) => {\n        if (!(Guid && typeof Guid === "string")) return null;\n        const topic = topics.list.get(Guid);\n        return topic;\n      })\n      .filter((topic) => topic) as OBC.Topic[];\n\n    const topicsToExport =\n      selectedTopics.length > 0 ? selectedTopics : [...topics.list.values()];\n\n    if (topicsToExport.length === 0) return;\n\n    const bcfData = await topics.export(topicsToExport);\n    const bcfFile = new File([bcfData], "topics.bcf");\n\n    const a = document.createElement("a");\n    a.href = URL.createObjectURL(bcfFile);\n    a.download = bcfFile.name;\n    a.click();\n    URL.revokeObjectURL(a.href);\n  };\n\n  return BUI.html`<bim-button style="flex: 0" @click=${onDownload} label="Download BCF" icon="material-symbols:download"></bim-button> `;\n});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-creating-a-panel-to-hold-the-table",children:"\ud83e\udd45 Creating a Panel to Hold the Table"}),"\n",(0,o.jsx)(n.p,{children:"Let's now create a BIM Panel to hold the topics list while also adding the corresponding buttons to trigger the functionalities like showing the form and downloading the BCF file:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const bcfPanel = BUI.Component.create(() => {\n  const onTextInput = (e: Event) => {\n    const input = e.target as BUI.TextInput;\n    topicsList.queryString = input.value;\n  };\n\n  return BUI.html`\n    <bim-panel>\n      <bim-panel-section label="BCF" fixed>\n        <div style="display: flex; justify-content: space-between; gap: 0.5rem">\n          <bim-text-input style="flex-grow: 0; flex-basis: 15rem" @input=${onTextInput} placeholder="Search a topic..." debounce="100"></bim-text-input>\n          <div style="display: flex; gap: 0.5rem">\n            ${showFormBtn}\n            ${downloadBtn}\n          </div> \n        </div> \n        ${topicsList}\n      </bim-panel-section>\n    </bim-panel>\n  `;\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"Finally, let's create a BIM Grid element and provide the panels to the viewport to display everything."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const app = document.createElement("bim-grid");\napp.layouts = {\n  main: {\n    template: `\n    "customTopicPanel viewport"\n    "customTopicPanel bcfPanel" 25rem\n    /24rem 1fr\n    `,\n    elements: { bcfPanel, viewport, customTopicPanel: topicPanel },\n  },\n};\n\napp.layout = "main";\ndocument.body.append(app);\n'})}),"\n",(0,o.jsx)(n.p,{children:"Congratulations! You have now created a fully working BCF user interface for your app in less than 10 minutes of work. Keep going with more tutorials! \ud83d\udcaa"})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(6540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);