"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3877],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,b=d["".concat(l,".").concat(u)]||d[u]||c[u]||p;return n?a.createElement(b,i(i({ref:t},m),{},{components:n})):a.createElement(b,i({ref:t},m))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,i=new Array(p);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<p;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const p={id:"openbim_components.Updateable",title:"Interface: Updateable",sidebar_label:"Updateable",custom_edit_url:null},i=void 0,o={unversionedId:"api/interfaces/openbim_components.Updateable",id:"api/interfaces/openbim_components.Updateable",title:"Interface: Updateable",description:"openbim-components.Updateable",source:"@site/docs/api/interfaces/openbim_components.Updateable.md",sourceDirName:"api/interfaces",slug:"/api/interfaces/openbim_components.Updateable",permalink:"/api/interfaces/openbim_components.Updateable",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"openbim_components.Updateable",title:"Interface: Updateable",sidebar_label:"Updateable",custom_edit_url:null},sidebar:"tutorialSidebar",previous:{title:"UI",permalink:"/api/interfaces/openbim_components.UI"},next:{title:"AngleMeasurement",permalink:"/Tutorials/AngleMeasurement"}},l={},s=[{value:"Implemented by",id:"implemented-by",level:2},{value:"Properties",id:"properties",level:2},{value:"onAfterUpdate",id:"onafterupdate",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"onBeforeUpdate",id:"onbeforeupdate",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"update",id:"update",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-2",level:4}],m={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/api/modules/openbim_components"},"openbim-components"),".Updateable"),(0,r.kt)("p",null,"Whether this component should be updated each frame."),(0,r.kt)("h2",{id:"implemented-by"},"Implemented by"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/openbim_components.CubeMap"},(0,r.kt)("inlineCode",{parentName:"a"},"CubeMap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/openbim_components.LengthMeasurement"},(0,r.kt)("inlineCode",{parentName:"a"},"LengthMeasurement"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/openbim_components.Simple2DScene"},(0,r.kt)("inlineCode",{parentName:"a"},"Simple2DScene"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/openbim_components.SimpleCamera"},(0,r.kt)("inlineCode",{parentName:"a"},"SimpleCamera"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/api/classes/openbim_components.SimpleRenderer"},(0,r.kt)("inlineCode",{parentName:"a"},"SimpleRenderer")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"onafterupdate"},"onAfterUpdate"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"onAfterUpdate"),": ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/openbim_components.Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,r.kt)("p",null,"Actions that should be executed after updating the component."),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/components/blob/0c38d20/src/base-types/base-types.ts#L109"},"temp/components/src/base-types/base-types.ts:109")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"onbeforeupdate"},"onBeforeUpdate"),(0,r.kt)("p",null,"\u2022 ",(0,r.kt)("strong",{parentName:"p"},"onBeforeUpdate"),": ",(0,r.kt)("a",{parentName:"p",href:"/api/classes/openbim_components.Event"},(0,r.kt)("inlineCode",{parentName:"a"},"Event")),"<",(0,r.kt)("inlineCode",{parentName:"p"},"any"),">"),(0,r.kt)("p",null,"Actions that should be executed before updating the component."),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/components/blob/0c38d20/src/base-types/base-types.ts#L112"},"temp/components/src/base-types/base-types.ts:112")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"update"},"update"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"update"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"delta?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("p",null,"Function used to update the state of this component each frame. For\ninstance, a renderer component will make a render each frame."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"delta?")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number"))))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/IFCjs/components/blob/0c38d20/src/base-types/base-types.ts#L118"},"temp/components/src/base-types/base-types.ts:118")))}c.isMDXComponent=!0}}]);