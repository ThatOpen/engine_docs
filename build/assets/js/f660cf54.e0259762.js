"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[5977],{8001:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});var n=l(4848),s=l(8453);const d={},i="ModelIdMapUtils",r={id:"api/@thatopen/components/classes/ModelIdMapUtils",title:"ModelIdMapUtils",description:"Utility class for manipulating and managing ModelIdMap objects. A ModelIdMap is a mapping of model identifiers (strings) to sets of local IDs (numbers). This class provides methods for joining, intersecting, cloning, adding, removing, and comparing ModelIdMap objects, as well as converting between ModelIdMap and plain JavaScript objects.",source:"@site/docs/api/@thatopen/components/classes/ModelIdMapUtils.md",sourceDirName:"api/@thatopen/components/classes",slug:"/api/@thatopen/components/classes/ModelIdMapUtils",permalink:"/api/@thatopen/components/classes/ModelIdMapUtils",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MeasurementUtils",permalink:"/api/@thatopen/components/classes/MeasurementUtils"},next:{title:"Mouse",permalink:"/api/@thatopen/components/classes/Mouse"}},c={},a=[{value:"Methods",id:"methods",level:2},{value:"add()",id:"add",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"clone()",id:"clone",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"fromRaw()",id:"fromraw",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"intersect()",id:"intersect",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"isEmpty()",id:"isempty",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"isEqual()",id:"isequal",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"join()",id:"join",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"remove()",id:"remove",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-7",level:4},{value:"toRaw()",id:"toraw",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Returns",id:"returns-8",level:4}];function o(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"modelidmaputils",children:"ModelIdMapUtils"}),"\n",(0,n.jsxs)(t.p,{children:["Utility class for manipulating and managing ",(0,n.jsx)(t.code,{children:"ModelIdMap"})," objects. A ",(0,n.jsx)(t.code,{children:"ModelIdMap"})," is a mapping of model identifiers (strings) to sets of local IDs (numbers). This class provides methods for joining, intersecting, cloning, adding, removing, and comparing ",(0,n.jsx)(t.code,{children:"ModelIdMap"})," objects, as well as converting between ",(0,n.jsx)(t.code,{children:"ModelIdMap"})," and plain JavaScript objects."]}),"\n",(0,n.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,n.jsx)(t.h3,{id:"add",children:"add()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"add"}),"(",(0,n.jsx)(t.code,{children:"target"}),", ",(0,n.jsx)(t.code,{children:"source"}),", ",(0,n.jsx)(t.code,{children:"clone"}),"): ",(0,n.jsx)(t.code,{children:"void"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Adds all entries from one ModelIdMap to another."}),"\n",(0,n.jsx)(t.h4,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"target"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"undefined"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to add to."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"source"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"undefined"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to add from."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"clone"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"boolean"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"-"})]})]})]}),"\n",(0,n.jsx)(t.h4,{id:"returns",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"void"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"clone",children:"clone()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"clone"}),"(",(0,n.jsx)(t.code,{children:"source"}),"): ",(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Creates a deep clone of a ModelIdMap."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"source"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to clone."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-1",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),"\n",(0,n.jsx)(t.p,{children:"A new ModelIdMap with the same model identifiers and localIds as the original."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"fromraw",children:"fromRaw()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"fromRaw"}),"(",(0,n.jsx)(t.code,{children:"raw"}),"): ",(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Creates a ModelIdMap from a plain JavaScript object with array values."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"raw"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"object"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"A plain JavaScript object where each key (model ID) maps to an array of local IDs."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-2",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),"\n",(0,n.jsx)(t.p,{children:"A ModelIdMap."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"intersect",children:"intersect()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"intersect"}),"(",(0,n.jsx)(t.code,{children:"maps"}),"): ",(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Creates a new ModelIdMap from the intersection of multiple ModelIdMaps."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"maps"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})}),"[]"]}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"An array of ModelIdMaps."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-3",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),"\n",(0,n.jsx)(t.p,{children:"A new ModelIdMap containing only model identifiers and localIds present in all input maps."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"isempty",children:"isEmpty()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"isEmpty"}),"(",(0,n.jsx)(t.code,{children:"map"}),"): ",(0,n.jsx)(t.code,{children:"boolean"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Checks if a ModelIdMap is empty."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"map"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to check."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-4",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"boolean"})}),"\n",(0,n.jsx)(t.p,{children:"True if the ModelIdMap is empty, false otherwise."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"isequal",children:"isEqual()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"isEqual"}),"(",(0,n.jsx)(t.code,{children:"a"}),", ",(0,n.jsx)(t.code,{children:"b"}),"): ",(0,n.jsx)(t.code,{children:"boolean"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Checks if two ModelIdMaps are equal."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"a"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The first ModelIdMap."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"b"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The second ModelIdMap."})]})]})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-5",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"boolean"})}),"\n",(0,n.jsx)(t.p,{children:"True if the ModelIdMaps are equal, false otherwise."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"join",children:"join()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"join"}),"(",(0,n.jsx)(t.code,{children:"maps"}),"): ",(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Creates a new ModelIdMap from the union of multiple ModelIdMaps."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"maps"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})}),"[]"]}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"An array of ModelIdMaps to join."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-6",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),"\n",(0,n.jsx)(t.p,{children:"A new ModelIdMap containing all model identifiers and localIds from all input maps."}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"remove",children:"remove()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"remove"}),"(",(0,n.jsx)(t.code,{children:"target"}),", ",(0,n.jsx)(t.code,{children:"source"}),", ",(0,n.jsx)(t.code,{children:"clone"}),"): ",(0,n.jsx)(t.code,{children:"void"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Remove all entries from one ModelIdMap to another."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Default value"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"target"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"undefined"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to subtract from."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"source"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"undefined"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to subtract."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"clone"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"boolean"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"false"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"-"})]})]})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-7",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"void"})}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.h3,{id:"toraw",children:"toRaw()"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"static"})," ",(0,n.jsx)(t.strong,{children:"toRaw"}),"(",(0,n.jsx)(t.code,{children:"map"}),"): ",(0,n.jsx)(t.code,{children:"object"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Converts a ModelIdMap into a plain JavaScript object with array values."}),"\n",(0,n.jsx)(t.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.code,{children:"map"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:(0,n.jsx)(t.a,{href:"/api/@thatopen/components/type-aliases/ModelIdMap",children:(0,n.jsx)(t.code,{children:"ModelIdMap"})})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The ModelIdMap to convert."})]})})]}),"\n",(0,n.jsx)(t.h4,{id:"returns-8",children:"Returns"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"object"})}),"\n",(0,n.jsx)(t.p,{children:"A plain JavaScript object where each key (model ID) maps to an array of local IDs."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},8453:(e,t,l)=>{l.d(t,{R:()=>i,x:()=>r});var n=l(6540);const s={},d=n.createContext(s);function i(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);