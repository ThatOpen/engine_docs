"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7524],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),g=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=g(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=g(n),d=a,u=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(u,o(o({ref:t},p),{},{components:n})):r.createElement(u,o({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var g=2;g<i;g++)o[g]=n[g];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3192:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>g});var r=n(7462),a=(n(7294),n(3905));const i={},o=void 0,l={unversionedId:"Tutorials/FragmentTree",id:"Tutorials/FragmentTree",title:"FragmentTree",description:"\ud83c\udf32 Gathering Structured Insights",source:"@site/docs/Tutorials/FragmentTree.mdx",sourceDirName:"Tutorials",slug:"/Tutorials/FragmentTree",permalink:"/docs/Tutorials/FragmentTree",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FragmentPlans",permalink:"/docs/Tutorials/FragmentPlans"},next:{title:"IfcPropertiesFinder",permalink:"/docs/Tutorials/IfcPropertiesFinder"}},s={},g=[{value:"\ud83c\udf32 Gathering Structured Insights",id:"-gathering-structured-insights",level:3},{value:"\ud83e\udde9 Adding Fragments",id:"-adding-fragments",level:3},{value:"\ud83d\udd79 Selection of Fragments",id:"-selection-of-fragments",level:3},{value:"Adding Aesthetic Outlines",id:"adding-aesthetic-outlines",level:4},{value:"\ud83d\uddc2\ufe0f Strategically Classifying Fragments",id:"\ufe0f-strategically-classifying-fragments",level:3},{value:"Getting Properties",id:"getting-properties",level:4},{value:"\ud83c\udf31 Building Insightful Tree Views",id:"-building-insightful-tree-views",level:3},{value:"\ud83d\udece\ufe0f Managing Tree-View Events",id:"\ufe0f-managing-tree-view-events",level:4},{value:"\ud83c\udfa8 Rendering the Fragment Tree",id:"-rendering-the-fragment-tree",level:4}],p={toc:g},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"-gathering-structured-insights"},"\ud83c\udf32 Gathering Structured Insights"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Building Information Modeling comprises nesting elements in multiple hierarchies.\nWorking with this information might become complicated and irritating.\ud83e\udd2f\n",(0,a.kt)("strong",{parentName:"p"},"Tree-View")," is extremely effective in managing this volume of data.\nUsing ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../api/classes/components.FragmentTree"},"Fragment Tree")),", we have made it simple to generate a Tree-View for a fragment.\ud83e\uddbe"),(0,a.kt)("admonition",{title:"First, let's set up a simple scene!",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"\ud83d\udc40 If you haven't started there, check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/Tutorials/SimpleScene"},"that tutorial first"),"!")),(0,a.kt)("p",null,"In this lesson, we'll create a ",(0,a.kt)("strong",{parentName:"p"},"Tree-View")," for the items in the IFC file and zoom in on them when a node is clicked."),(0,a.kt)("h3",{id:"-adding-fragments"},"\ud83e\udde9 Adding Fragments"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"We'll start by adding a ",(0,a.kt)("strong",{parentName:"p"},"Fragment")," to our scene using ",(0,a.kt)("a",{parentName:"p",href:"../api/classes/components.FragmentManager"},(0,a.kt)("strong",{parentName:"a"},"FragmentManager")),".\nWe'll use a simple fragment for the purposes of this tutorial, but the code is capable of handling big files as well.\ud83c\udfd7\ufe0f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const fragments = new OBC.FragmentManager(components);\nconst file = await fetch("../../../resources/small.frag");\nconst data = await file.arrayBuffer();\nconst buffer = new Uint8Array(data);\nconst model = await fragments.load(buffer);\n')),(0,a.kt)("h3",{id:"-selection-of-fragments"},"\ud83d\udd79 Selection of Fragments"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Whenever you click on a ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," in ",(0,a.kt)("strong",{parentName:"p"},"Tree-View"),", that particular element would be highlighted.\nTo create the highlight mechanism, we will use ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../api/classes/components.FragmentHighlighter"},"Fragment Highlighter")),"\nthat manages the material and selection intuitively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const highlighter = new OBC.FragmentHighlighter(components, fragments);\nhighlighter.setup();\n")),(0,a.kt)("admonition",{title:"Highlighting Fragments",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"\ud83d\uddb1Check out ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/Tutorials/FragmentHighlighter"},"FragmentHighlighter.mdx"))," for a detailed tutorial on how to utilize Fragment Highlighter to conduct selection on ",(0,a.kt)("strong",{parentName:"p"},"IFC files"),"!")),(0,a.kt)("h4",{id:"adding-aesthetic-outlines"},"Adding Aesthetic Outlines"),(0,a.kt)("p",null,"Now that highlighter setup is done, we will add a nice outline effect when the elements are selected."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"components.renderer.postproduction.customEffects.outlineEnabled = true;\nhighlighter.outlinesEnabled = true;\nhighlighter.update();\n")),(0,a.kt)("h3",{id:"\ufe0f-strategically-classifying-fragments"},"\ud83d\uddc2\ufe0f Strategically Classifying Fragments"),(0,a.kt)("p",null,"In this tutorial, we will deconstruct the model in order to obtain a hierarchical view.\ud83d\udca3\nTo obtain a nested view, we must first classify them by ",(0,a.kt)("strong",{parentName:"p"},"floors")," and then by ",(0,a.kt)("strong",{parentName:"p"},"type")," entities.\nFor breaking down the model in the required way, we'll utilize ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../api/classes/components.FragmentClassifier"},"Fragment Classifier")),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const classifier = new OBC.FragmentClassifier(components);\n")),(0,a.kt)("h4",{id:"getting-properties"},"Getting Properties"),(0,a.kt)("p",null,"Fragment Classifier requires model properties that will help the classifier in identifying the floors and entities included inside the Fragment.\ud83e\uddee\nWe will fetch the properties from ",(0,a.kt)("inlineCode",{parentName:"p"},"json")," file and store it in ",(0,a.kt)("inlineCode",{parentName:"p"},"model.properties"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const properties = await fetch("../../../resources/small.json");\nmodel.properties = await properties.json();\n')),(0,a.kt)("p",null,"Now that we have the properties, we will pass the model to classifier and use ",(0,a.kt)("inlineCode",{parentName:"p"},"classifier.byStorey()")," which will group the Fragments according to Floors.\nThe model then needs to be classified according to entities using ",(0,a.kt)("inlineCode",{parentName:"p"},"classifier.byEntity()"),".\ud83d\uddc2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"classifier.byStorey(model);\nclassifier.byEntity(model);\n")),(0,a.kt)("h3",{id:"-building-insightful-tree-views"},"\ud83c\udf31 Building Insightful Tree Views"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Now comes the interesting part, we will create ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"FragmentTree"))," using ",(0,a.kt)("strong",{parentName:"p"},"components")," and ",(0,a.kt)("strong",{parentName:"p"},"classifier"),".\nIn addition, we will update the ",(0,a.kt)("strong",{parentName:"p"},"Fragment Tree")," to produce the Tree-View based on ",(0,a.kt)("inlineCode",{parentName:"p"},"storeys")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"entities"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const modelTree = new OBC.FragmentTree(components);\nawait modelTree.init();\nmodelTree.update(['storeys', 'entities']);\n")),(0,a.kt)("h4",{id:"\ufe0f-managing-tree-view-events"},"\ud83d\udece\ufe0f Managing Tree-View Events"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"We will zoom in on the element that is selected in the Tree-View and add a nice highlight effect when the user hovers over a tree node.\ud83d\uddb1\nLet's use ",(0,a.kt)("inlineCode",{parentName:"p"},"modelTree.selected")," to get the active selection from Fragment Tree, and we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"highlighter.highlightByID()")," to zoom in.\ud83d\udd0d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"modelTree.onSelected.add((filter) => {\nhighlighter.highlightByID('select', filter, true, true);\n});\nmodelTree.onHovered.add((filter) => {\nhighlighter.highlightByID('hover', filter);\n});\n")),(0,a.kt)("h4",{id:"-rendering-the-fragment-tree"},"\ud83c\udfa8 Rendering the Fragment Tree"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Now, that all the setup is done we will add the ",(0,a.kt)("strong",{parentName:"p"},"Fragment Tree")," to the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"../api/classes/components.Toolbar"},"Toolbar")),".\nWe will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"addChild()")," method to pass the Fragment Tree data to the ",(0,a.kt)("strong",{parentName:"p"},"Toolbar"),"\n\ud83c\udf9b\ufe0f Check ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/Tutorials/UIManager"},"Toolbar and UIManager"))," tutorial if you have any doubts!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const toolbar = new OBC.Toolbar(components);\ntoolbar.addChild(modelTree.uiElement.get("main"));\ncomponents.ui.addToolbar(toolbar);\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Cheers and Congratulations")," \ud83c\udf89 on completing this short yet powerful tutorial!\nNow, you can provide a structured, navigable, and user-friendly interface to manage, explore, and interact with your BIM models.\ud83e\udd41\nLet's keep it up and check out another tutorial! \ud83c\udf93"),(0,a.kt)("iframe",{src:"https://ifcjs.github.io/components/src/fragments/FragmentTree/index.html"}))}c.isMDXComponent=!0}}]);