"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[9454],{9891:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(4848),i=t(8453);const o={},r=void 0,s={id:"Tutorials/UserInterface/Core/Table/Searching",title:"Searching",description:'window.open("https://thatopen.github.io/engine_ui-components/examples/Table/Searching")} >Go Full Screen',source:"@site/docs/Tutorials/UserInterface/Core/Table/Searching.mdx",sourceDirName:"Tutorials/UserInterface/Core/Table",slug:"/Tutorials/UserInterface/Core/Table/Searching",permalink:"/Tutorials/UserInterface/Core/Table/Searching",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LoadFunction",permalink:"/Tutorials/UserInterface/Core/Table/LoadFunction"},next:{title:"ItemsData",permalink:"/Tutorials/UserInterface/OBC/ItemsData"}},l={},c=[{value:"Searching Through Your Data \ud83d\udd0e",id:"searching-through-your-data-",level:3},{value:"\ud83d\udd96 Initializing the Library and Setting the Table",id:"-initializing-the-library-and-setting-the-table",level:3},{value:"\ud83c\udd8e Implementing a Search Box",id:"-implementing-a-search-box",level:3},{value:"\ud83c\udd8e Advanced Searching (WIP)",id:"-advanced-searching-wip",level:3},{value:"\ud83d\udd17 Putting Everything Together",id:"-putting-everything-together",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{style:{position:"relative"},children:[(0,a.jsx)("iframe",{src:"https://thatopen.github.io/engine_ui-components/examples/Table/Searching"}),(0,a.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_ui-components/examples/Table/Searching"),children:"Go Full Screen"})]}),"\n",(0,a.jsx)(n.admonition,{title:"Source",type:"info",children:(0,a.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,a.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_ui-components/blob/main/packages/core/src/components/Table/examples/Searching/example.ts",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h3,{id:"searching-through-your-data-",children:"Searching Through Your Data \ud83d\udd0e"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:'Chances are low to say "I have the best table in the internet" without having the possibility to search information from it, right? Well, doing it with the bim-table Web Component is extremely simple! So let\'s dive in.'}),"\n",(0,a.jsx)(n.h3,{id:"-initializing-the-library-and-setting-the-table",children:"\ud83d\udd96 Initializing the Library and Setting the Table"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"As always, let's first initialize the UI library. Remember you only have to do it once in your entire app."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// You have to import from "@thatopen/ui"\nimport * as BUI from "../../../..";\n\nBUI.Manager.init();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Once you have initialized the library, you can create a new table or get an existing from your HTML document. For simplicity purposes, let's create one programatically:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'type TableData = {\n  Name: string;\n  Age: number;\n  Job: string;\n  Company: string;\n  Bio: string;\n};\n\nconst table = BUI.Component.create<BUI.Table<TableData>>(\n  () => BUI.html`\n    <bim-table expanded>\n      <div slot="missing-data" style="display: flex; flex-direction: column; align-items: center; width: 8rem; margin: auto;">\n        <bim-label>No data to display!</bim-label>\n      </div>\n    </bim-table> \n  `,\n);\n\ntable.data = [\n  {\n    data: {\n      Name: "Juan Hoyos",\n      Age: 28,\n      Job: "BIM Software Developer",\n      Company: "That Open Company",\n      Bio: "Juan is a very cool guy, writing this tutorial so you know how to use a really powerful table in your projects",\n    },\n    children: [\n      {\n        data: {\n          Name: "Maria Lopez",\n          Age: 24,\n          Job: "Junior BIM Specialist",\n          Company: "That Open Company",\n          Bio: "Maria assists Juan in developing BIM solutions and learning the ropes of software development.",\n        },\n      },\n      {\n        data: {\n          Name: "Ana Garcia",\n          Age: 32,\n          Job: "Structural Engineer",\n          Company: "Skyline Structures",\n          Bio: "Ana is a meticulous engineer with a knack for ensuring that every project is structurally sound.",\n        },\n        children: [\n          {\n            data: {\n              Name: "Luis Herrera",\n              Age: 27,\n              Job: "BIM Software Developer",\n              Company: "Skyline Structures",\n              Bio: "Luis is Ana\'s right hand, assisting in design calculations and learning advanced structural modeling.",\n            },\n          },\n        ],\n      },\n    ],\n  },\n  {\n    data: {\n      Name: "Antonio Viegas",\n      Age: 30,\n      Job: "BIM Software Developer",\n      Company: "That Open Company",\n      Bio: "Antonio is the CEO of That Open Company. He is the author of @thatopen/fragments.",\n    },\n    children: [\n      {\n        data: {\n          Name: "Sara Jimenez",\n          Age: 30,\n          Job: "Assistant Project Manager",\n          Company: "BuildSmart Ltd.",\n          Bio: "Sara supports Carlos in project planning, client coordination, and schedule management.",\n        },\n      },\n      {\n        data: {\n          Name: "Tomas Rivera",\n          Age: 33,\n          Job: "Site Supervisor",\n          Company: "BuildSmart Ltd.",\n          Bio: "Tomas ensures that project sites run smoothly, handling logistics and on-site team coordination.",\n        },\n      },\n    ],\n  },\n];\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-implementing-a-search-box",children:"\ud83c\udd8e Implementing a Search Box"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["When it comes to search data in a bim-table we have the powerful ",(0,a.jsx)(n.code,{children:"table.queryString"}),'. It is "just" a string property in the table component to filter the matching values. However, it goes beyond that \ud83d\ude09 Let\'s start by simply setting a text input to provide a value to the query string property as follows:']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// You can search data in the table by providing a queryString\nconst searchBox = BUI.Component.create<BUI.TextInput>(() => {\n  const onInput = (e: Event) => {\n    const input = e.target;\n    if (!(input instanceof BUI.TextInput)) return;\n    table.queryString = input.value; // Here is where the magic happens!\n  };\n\n  return BUI.html`\n   <bim-text-input @input=${onInput} placeholder="Search..." debounce=250></bim-text-input> \n  `;\n});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Basically that's it! The only thing you need is to provide a value to ",(0,a.jsx)(n.code,{children:"table.queryString"})," and the rest is handled internally by the component. However, at this point a question arises: what happens with the nestings when you filter the data? Well, it depends on you! By default, when the table is filtered the nestings are removed; but, in case you prefer to keep the nesting structure, then you just have to activate the corresponding option. To better ilustrate this, let's implement a very simple checkbox to change the nesting structure behavior when searching:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const preserveStructure = BUI.Component.create(() => {\n  const onChange = (e: Event) => {\n    const input = e.target;\n    if (!(input instanceof BUI.Checkbox)) return;\n    // You just have to change the following flag in your table\n    table.preserveStructureOnFilter = input.checked;\n  };\n\n  return BUI.html`\n   <bim-checkbox @change=${onChange} label="Preserve Structure"></bim-checkbox> \n  `;\n});\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["Assuming you're using the same data as in this tutorial, try searching ",(0,a.jsx)(n.code,{children:"Tomas"})," with and without the ",(0,a.jsx)(n.code,{children:"Preserve Structure"})," flag checked to notice the difference!"]})}),"\n",(0,a.jsx)(n.h3,{id:"-advanced-searching-wip",children:"\ud83c\udd8e Advanced Searching (WIP)"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["So far, so good! We already have a functional search box for the table in the app. What's next? Well, you can leave it until here, but there is something more you should know about ",(0,a.jsx)(n.code,{children:"queryString"}),"... and that is you can use it to perform complex queries (thus the name). For example, what happens if you want to know which users in the table are older than 30 years old? Or to know who is a manager? Or maybe knowing if someone matches an specific keyword in the Bio? What about something more complex as people working as a BIM Software Developer in That Open Company? For all those cases, you can still use the exact same query string property without doing any special configuration in the table! The only difference is how you write the search."]}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["In order to define a query, you need to specify the column to search through, then some condition, and finally the value to look at; in other words, the structure is [column][condition][value]. Optionally, you can concatenate multiple queries by using the ",(0,a.jsx)(n.code,{children:"&"})," operator. Currently, the available conditionals are:"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Equals (","=",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Includes (","?",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Less Than (","<",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Less Than or Equals to (","<=",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Greater Than (",">",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Greater Than or Equals to (",">=",")"]}),"\n",(0,a.jsxs)(n.li,{children:["Starts With (","/",")"]}),"\n"]})]}),"\n",(0,a.jsx)(n.p,{children:"So, with that in mind, try to do the following queries by yourself \ud83d\udc47"}),"\n",(0,a.jsx)(n.admonition,{title:"Users older than 30 years old",type:"note",children:(0,a.jsx)(n.p,{children:"Age>30"})}),"\n",(0,a.jsx)(n.admonition,{title:"Managers",type:"note",children:(0,a.jsx)(n.p,{children:"Job?Manager"})}),"\n",(0,a.jsx)(n.admonition,{title:"BIM Software Developers in That Open Company",type:"note",children:(0,a.jsx)(n.p,{children:"Job?Developer & Company=That Open Company"})}),"\n",(0,a.jsx)(n.p,{children:"Cool, isn't? Also, is very simple yet powerful. Now, something really cool you can do knowing that is to do some quick filters for you end-users. Let's do it as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const quickFilters = BUI.Component.create(() => {\n  const onManagersClick = () => {\n    const query = "Job?Manager";\n    table.queryString = query;\n    // We also update the search box to reflect the current query\n    searchBox.value = query;\n  };\n\n  const onDevelopersClick = () => {\n    const query = "Job?Developer";\n    table.queryString = query;\n    // We also update the search box to reflect the current query\n    searchBox.value = query;\n  };\n\n  return BUI.html`\n    <div style="display: flex; gap: 0.5rem">\n      <bim-button @click=${onManagersClick} label="Managers"></bim-button> \n      <bim-button @click=${onDevelopersClick} label="Developers"></bim-button> \n    </div>\n  `;\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-putting-everything-together",children:"\ud83d\udd17 Putting Everything Together"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"As everything is already setup, let's create a new component to hold all everything and display them in the page. You can do it very easily like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const appContent = BUI.Component.create(\n  () => BUI.html`\n    <div style="display: flex; flex-direction: column; gap: 0.75rem; height: 100%;">\n      <div style="display: flex; gap: 0.75rem;">\n        ${searchBox}\n        ${quickFilters}\n        ${preserveStructure}\n      </div>\n      ${table}\n    </div>\n  `,\n);\n\ndocument.body.append(appContent);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Congratulations! You already know how to use an advanced feature of the bim-table component to display the information exactly how you need it. Don't hesitate into watching more tutorials! \ud83d\ude80"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(6540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);