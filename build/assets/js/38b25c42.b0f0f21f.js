"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[6688],{2377:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var t=l(4848),i=l(8453);const s={},r="TextInput",d={id:"api/@thatopen/ui/classes/TextInput",title:"TextInput",description:"A custom text input web component for BIM applications. HTML tag: bim-text-input",source:"@site/docs/api/@thatopen/ui/classes/TextInput.md",sourceDirName:"api/@thatopen/ui/classes",slug:"/api/@thatopen/ui/classes/TextInput",permalink:"/api/@thatopen/ui/classes/TextInput",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tabs",permalink:"/api/@thatopen/ui/classes/Tabs"},next:{title:"Toolbar",permalink:"/api/@thatopen/ui/classes/Toolbar"}},a={},c=[{value:"Extends",id:"extends",level:2},{value:"Implements",id:"implements",level:2},{value:"Properties",id:"properties",level:2},{value:"debounce?",id:"debounce",level:3},{value:"Default",id:"default",level:4},{value:"Example",id:"example",level:4},{value:"disabled",id:"disabled",level:3},{value:"Default",id:"default-1",level:4},{value:"Example",id:"example-1",level:4},{value:"icon?",id:"icon",level:3},{value:"Example",id:"example-2",level:4},{value:"label?",id:"label",level:3},{value:"Example",id:"example-3",level:4},{value:"Implementation of",id:"implementation-of",level:4},{value:"name?",id:"name",level:3},{value:"Example",id:"example-4",level:4},{value:"Implementation of",id:"implementation-of-1",level:4},{value:"placeholder?",id:"placeholder",level:3},{value:"Example",id:"example-5",level:4},{value:"resize",id:"resize",level:3},{value:"Default",id:"default-2",level:4},{value:"Example",id:"example-6",level:4},{value:"value",id:"value",level:3},{value:"Example",id:"example-7",level:4},{value:"Implementation of",id:"implementation-of-2",level:4},{value:"vertical",id:"vertical",level:3},{value:"Default",id:"default-3",level:4},{value:"Example",id:"example-8",level:4},{value:"styles",id:"styles",level:3},{value:"Overrides",id:"overrides",level:4},{value:"Accessors",id:"accessors",level:2},{value:"query",id:"query",level:3},{value:"Example",id:"example-9",level:4},{value:"Returns",id:"returns",level:4},{value:"type",id:"type",level:3},{value:"Example",id:"example-10",level:4},{value:"Parameters",id:"parameters",level:4}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"textinput",children:"TextInput"}),"\n",(0,t.jsx)(n.p,{children:"A custom text input web component for BIM applications. HTML tag: bim-text-input"}),"\n",(0,t.jsx)(n.h2,{id:"extends",children:"Extends"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"LitElement"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implements",children:"Implements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/@thatopen/ui/interfaces/HasName",children:(0,t.jsx)(n.code,{children:"HasName"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/api/@thatopen/ui/interfaces/HasValue",children:(0,t.jsx)(n.code,{children:"HasValue"})})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"debounce",children:"debounce?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"debounce"}),": ",(0,t.jsx)(n.code,{children:"number"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Represents the debounce property of the TextInput component.\r\nThis property is used to control the delay in milliseconds before the ",(0,t.jsx)(n.code,{children:"input"})," event is fired.\r\nThe ",(0,t.jsx)(n.code,{children:"input"})," event is debounced to prevent excessive event firing when the user types rapidly."]}),"\n",(0,t.jsx)(n.h4,{id:"default",children:"Default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"undefined\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input debounce="500"></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"disabled",children:"disabled"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"disabled"}),": ",(0,t.jsx)(n.code,{children:"boolean"})," = ",(0,t.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Represents the disabled property of the TextInput component.\r\nThis property is used to disable the input field.\r\nWhen set to ",(0,t.jsx)(n.code,{children:"true"}),", the input field will be disabled and the user will not be able to interact with it."]}),"\n",(0,t.jsx)(n.h4,{id:"default-1",children:"Default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"false\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"<bim-text-input disabled></bim-text-input>\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"icon",children:"icon?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"icon"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the icon property of the TextInput component.\r\nThis property is used to display an icon next to the input field."}),"\n",(0,t.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input icon="material-symbols:search"></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"label",children:"label?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"label"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the label property of the TextInput component.\r\nThis property is used to display a label above or next to the input field."}),"\n",(0,t.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input label="Name"></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.h4,{id:"implementation-of",children:"Implementation of"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"HasName.label"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"name",children:"name?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"name"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the name property of the TextInput component.\r\nThis property is used to uniquely identify the input field within a form or group of inputs."}),"\n",(0,t.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input name="username"></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.h4,{id:"implementation-of-1",children:"Implementation of"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"HasName.name"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"placeholder",children:"placeholder?"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"optional"})," ",(0,t.jsx)(n.strong,{children:"placeholder"}),": ",(0,t.jsx)(n.code,{children:"string"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the placeholder property of the TextInput component.\r\nThis property is used to display a hint or a placeholder text inside the input field.\r\nThe placeholder text is displayed when the input field is empty and loses focus."}),"\n",(0,t.jsx)(n.h4,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input placeholder="Enter your name.."></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"resize",children:"resize"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"resize"}),": ",(0,t.jsx)(n.code,{children:'"inline"'})," | ",(0,t.jsx)(n.code,{children:'"none"'})," | ",(0,t.jsx)(n.code,{children:'"vertical"'})," | ",(0,t.jsx)(n.code,{children:'"both"'})," | ",(0,t.jsx)(n.code,{children:'"horizontal"'})," | ",(0,t.jsx)(n.code,{children:'"block"'})," = ",(0,t.jsx)(n.code,{children:'"vertical"'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Represents the resize property of the TextInput component.\r\nThis property controls how the textarea can be resized.\r\nPossible values: "none", "both", "horizontal", "vertical", "block", "inline"'}),"\n",(0,t.jsx)(n.h4,{id:"default-2",children:"Default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'"vertical"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'<bim-text-input resize="both"></bim-text-input>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"value",children:"value"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"value"}),": ",(0,t.jsx)(n.code,{children:"string"})," = ",(0,t.jsx)(n.code,{children:'""'})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Represents the value property of the TextInput component.\r\nThis property is used to get or set the current value of the input field."}),"\n",(0,t.jsx)(n.h4,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Get the current value\r\nconst currentValue = textInput.value;\n\n// Set a new value\r\ntextInput.value = "New Value";\n'})}),"\n",(0,t.jsx)(n.h4,{id:"implementation-of-2",children:"Implementation of"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"HasValue.value"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"vertical",children:"vertical"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"vertical"}),": ",(0,t.jsx)(n.code,{children:"boolean"})," = ",(0,t.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Represents the vertical property of the TextInput component.\r\nThis property is used to control the layout of the input field.\r\nWhen set to ",(0,t.jsx)(n.code,{children:"true"}),", the input field will be displayed vertically."]}),"\n",(0,t.jsx)(n.h4,{id:"default-3",children:"Default"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"false\n"})}),"\n",(0,t.jsx)(n.h4,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"<bim-text-input vertical></bim-text-input>\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"styles",children:"styles"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"static"})," ",(0,t.jsx)(n.strong,{children:"styles"}),": ",(0,t.jsx)(n.code,{children:"CSSResult"}),"[]"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"CSS styles for the component."}),"\n",(0,t.jsx)(n.h4,{id:"overrides",children:"Overrides"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"LitElement.styles"})}),"\n",(0,t.jsx)(n.h2,{id:"accessors",children:"Accessors"}),"\n",(0,t.jsx)(n.h3,{id:"query",children:"query"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"get"})," ",(0,t.jsx)(n.strong,{children:"query"}),"(): ",(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.a,{href:"/api/@thatopen/ui/type-aliases/Query",children:(0,t.jsx)(n.code,{children:"Query"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Gets the query value derived from the current input value.\r\nThe ",(0,t.jsx)(n.code,{children:"getQuery"})," function is assumed to be a utility function that takes a string as input\r\nand returns a processed query value based on the input."]}),"\n",(0,t.jsx)(n.h4,{id:"example-9",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const textInput = new TextInput();\r\ntextInput.value = "Key?Value";\r\nconsole.log(textInput.query);\n'})}),"\n",(0,t.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"null"})," | ",(0,t.jsx)(n.a,{href:"/api/@thatopen/ui/type-aliases/Query",children:(0,t.jsx)(n.code,{children:"Query"})})]}),"\n",(0,t.jsx)(n.p,{children:"The processed query value derived from the current input value."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"set"})," ",(0,t.jsx)(n.strong,{children:"type"}),"(",(0,t.jsx)(n.code,{children:"value"}),"): ",(0,t.jsx)(n.code,{children:"void"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Sets the type of the input field.\r\nThe type property determines the behavior of the input field.\r\nIt can be any of the following: "date", "datetime-local", "email", "month", "password", "search", "tel", "text", "time", "url", "week".\r\nIf an invalid type is provided, the type will not be changed.'}),"\n",(0,t.jsx)(n.h4,{id:"example-10",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Set the type to "email"\r\ntextInput.type = "email";\n'})}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"value"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"string"})})]})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>d});var t=l(6540);const i={},s=t.createContext(i);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);