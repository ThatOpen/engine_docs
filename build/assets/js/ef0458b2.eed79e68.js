"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[6697],{4379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=t(4848),r=t(8453);const o={},s=void 0,l={id:"Tutorials/Fragments/Fragments/IfcImporter/HelloWorldSchema",title:"HelloWorldSchema",description:'window.open("https://thatopen.github.io/engine_fragment/examples/IfcImporter/HelloWorldSchema")} >Go Full Screen',source:"@site/docs/Tutorials/Fragments/Fragments/IfcImporter/HelloWorldSchema.mdx",sourceDirName:"Tutorials/Fragments/Fragments/IfcImporter",slug:"/Tutorials/Fragments/Fragments/IfcImporter/HelloWorldSchema",permalink:"/Tutorials/Fragments/Fragments/IfcImporter/HelloWorldSchema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IfcImporter",permalink:"/Tutorials/Fragments/Fragments/IfcImporter/"},next:{title:"UserInterface",permalink:"/Tutorials/UserInterface/"}},i={},c=[{value:"Hello World Schema \ud83d\udccb",id:"hello-world-schema-",level:2},{value:"\ud83d\udd96 Importing our Libraries",id:"-importing-our-libraries",level:3},{value:"\ud83c\udf0e Setting up a Simple Scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83d\udd25 Setting up fragments",id:"-setting-up-fragments",level:3},{value:"\ud83d\udc85\ud83c\udffb Setting up the UI",id:"-setting-up-the-ui",level:3},{value:"\ud83d\udc7e Loading an IFC and extracting the schema",id:"-loading-an-ifc-and-extracting-the-schema",level:3},{value:"\ud83e\udd73 Congratulations!",id:"-congratulations",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{style:{position:"relative"},children:[(0,a.jsx)("iframe",{src:"https://thatopen.github.io/engine_fragment/examples/IfcImporter/HelloWorldSchema"}),(0,a.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_fragment/examples/IfcImporter/HelloWorldSchema"),children:"Go Full Screen"})]}),"\n",(0,a.jsx)(n.admonition,{title:"Source",type:"info",children:(0,a.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,a.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_fragment/blob/main/packages/fragments/src/Importers/IfcImporter/examples/HelloWorldSchema/example.ts",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"hello-world-schema-",children:"Hello World Schema \ud83d\udccb"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"In this demo we will create a simple app that allows us to navigate the Fragments schema of IFC STEP files. This is not something you will usually need to do in your apps, but it will serve as a demonstration and"}),"\n",(0,a.jsx)(n.h3,{id:"-importing-our-libraries",children:"\ud83d\udd96 Importing our Libraries"}),"\n",(0,a.jsx)(n.p,{children:"First things first, let's install all necessary dependencies to make this little example work:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install @thatopen/components @thatopen/ui @andypf/json-viewer stats.js pako flatbuffers three @thatopen/fragments @thatopen/components @thatopen/ui web-ifc\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import * as FB from "flatbuffers";\nimport pako from "pako";\nimport "@andypf/json-viewer";\nimport * as OBC from "@thatopen/components";\nimport * as THREE from "three";\nimport Stats from "stats.js";\nimport * as BUI from "@thatopen/ui";\nimport * as FRAGS from "../../../../..";\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a Simple Scene"}),"\n",(0,a.jsx)(n.p,{children:"Now we will create a simple scene with a camera, a renderer, and a world, as well as add some stats to keep an eye on the performance:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const components = new OBC.Components();\nconst worlds = components.get(OBC.Worlds);\nconst container = document.getElementById("viewer") as HTMLDivElement;\n\nconst world = worlds.create<\n  OBC.SimpleScene,\n  OBC.SimpleCamera,\n  OBC.SimpleRenderer\n>();\n\nworld.scene = new OBC.SimpleScene(components);\nworld.renderer = new OBC.SimpleRenderer(components, container);\nworld.camera = new OBC.SimpleCamera(components);\n\ncomponents.init();\n\nworld.scene.setup();\n\nconst stats = new Stats();\nstats.showPanel(2);\ndocument.body.append(stats.dom);\nstats.dom.style.left = "0px";\nstats.dom.style.zIndex = "unset";\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-setting-up-fragments",children:"\ud83d\udd25 Setting up fragments"}),"\n",(0,a.jsx)(n.p,{children:"Now we will set up Fragments for this app. If you are not familiar with Fragments, you can check out the other Fragments related tutorails in this documentation."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// prettier-ignore\nconst workerUrl = "https://thatopen.github.io/engine_fragment/resources/worker.mjs";\nconst fragments = new FRAGS.FragmentsModels(workerUrl);\nworld.camera.controls.addEventListener("control", () => fragments.update());\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-setting-up-the-ui",children:"\ud83d\udc85\ud83c\udffb Setting up the UI"}),"\n",(0,a.jsx)(n.p,{children:"Now we will create a simple UI to display the schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'BUI.Manager.init();\n\nconst jsonViewer = document.getElementById("json-viewer") as any;\n\nconst expandBtn = document.getElementById("expand-btn")!;\nexpandBtn.addEventListener("click", () => {\n  jsonViewer.expanded = true;\n});\n\nconst collapseBtn = document.getElementById("collapse-btn")!;\ncollapseBtn.addEventListener("click", () => {\n  jsonViewer.expanded = false;\n});\n\nconst loadFileBtn = document.getElementById("load-file-btn")!;\nconst loadWallBtn = document.getElementById("load-wall-btn")!;\nconst downloadBtn = document.getElementById("download-btn")!;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-loading-an-ifc-and-extracting-the-schema",children:"\ud83d\udc7e Loading an IFC and extracting the schema"}),"\n",(0,a.jsx)(n.p,{children:"Now we will convert an IFC file to a Fragments file, load it in the scene, and add extract its schema to display it in the screen."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let model: FRAGS.FragmentsModel | null = null;\nlet result = null as any;\n\nasync function loadIfcFile(fileUrl: string, raw: boolean) {\n  // If there is a previous model, dispose it\n  if (model) {\n    model.dispose();\n  }\n\n  // Load the model\n\n  const ifcFile = await fetch(fileUrl);\n  const ifcBuffer = await ifcFile.arrayBuffer();\n  const typedArray = new Uint8Array(ifcBuffer);\n  const serializer = new FRAGS.IfcImporter();\n  serializer.wasm = {\n    absolute: true,\n    path: "https://unpkg.com/web-ifc@0.0.69/",\n  };\n  const bytes = await serializer.process({ bytes: typedArray, raw: true });\n\n  model = await fragments.load(bytes, {\n    modelId: performance.now().toString(),\n    camera: world.camera.three,\n    raw: true,\n  });\n\n  world.scene.three.add(model.object);\n  await fragments.update(true);\n\n  // Extract the schema\n  const byteBuffer = new FB.ByteBuffer(raw ? bytes : pako.inflate(bytes));\n  const readModel = FRAGS.Model.getRootAsModel(byteBuffer);\n  result = {};\n  FRAGS.getObject(readModel, result);\n\n  // Display the schema in the screen\n  jsonViewer.data = {};\n  jsonViewer.data = result;\n\n  // Update the viewer\n  window.dispatchEvent(new Event("resize"));\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Finally, we just need to bind the UI to the loading logic:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'loadFileBtn.addEventListener("click", () => {\n  const input = document.createElement("input");\n  input.type = "file";\n  input.accept = ".ifc";\n  input.onchange = (event) => {\n    const file = (event.target as HTMLInputElement).files?.[0];\n    if (file) {\n      const url = URL.createObjectURL(file);\n      loadIfcFile(url, true);\n      URL.revokeObjectURL(url);\n    }\n  };\n  input.click();\n});\n\nloadWallBtn.addEventListener("click", () => {\n  const url =\n    "https://thatopen.github.io/engine_fragment/resources/ifc/just_wall.ifc";\n  loadIfcFile(url, true);\n});\n\ndownloadBtn.addEventListener("click", async () => {\n  if (!model) return;\n  const bytes = await model.getBuffer(true);\n  const a = document.createElement("a");\n  const file = new File([bytes], "small_test.frag");\n  const url = URL.createObjectURL(file);\n  a.href = url;\n  a.download = file.name;\n  a.click();\n  URL.revokeObjectURL(url);\n});\n'})}),"\n",(0,a.jsx)(n.h3,{id:"-congratulations",children:"\ud83e\udd73 Congratulations!"}),"\n",(0,a.jsx)(n.p,{children:"You have created an app that can extract Fragment schemas from IFC files. This should be useful for understanding how the fragment schema works and build your custom tools on top of Fragments!"})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(6540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);