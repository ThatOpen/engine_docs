"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[1378],{8244:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>l,toc:()=>h});var s=r(4848),i=r(8453);const t={sidebar_position:1},a="\ud83e\udde9 The schema",l={id:"fragments/schema",title:"\ud83e\udde9 The schema",description:"\ud83d\udeb8 Before you start",source:"@site/docs/fragments/schema.md",sourceDirName:"fragments",slug:"/fragments/schema",permalink:"/fragments/schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83d\ude80 Getting started",permalink:"/fragments/getting-started"},next:{title:"\ud83e\uddbe Building your own exporter/importer",permalink:"/fragments/custom-building"}},o={},h=[{value:"\ud83d\udeb8 Before you start",id:"-before-you-start",level:2},{value:"\ud83d\udc7e Introduction",id:"-introduction",level:2},{value:"\ud83c\udfe0 Check it out",id:"-check-it-out",level:2},{value:"\u270d\ud83c\udffb General notes",id:"-general-notes",level:2},{value:"\ud83c\udf71 Data structures",id:"-data-structures",level:3},{value:"\ud83d\udcc3\ud83d\udcc3\ud83d\udcc3 String arrays",id:"-string-arrays",level:3},{value:"\ud83e\udde9 Model",id:"-model",level:2},{value:"\ud83d\udccb Metadata",id:"-metadata",level:3},{value:"\ud83e\udd8b Guids",id:"-guids",level:3},{value:"\ud83e\udd8b\u27a1\ufe0f\u265f\ufe0f Guids Items",id:"\ufe0f\ufe0f-guids-items",level:3},{value:"\ud83e\udd47\ud83d\udc1b Max Local Id",id:"-max-local-id",level:3},{value:"\ud83d\udc1b Local Ids",id:"-local-ids",level:3},{value:"\ud83e\uddec Categories",id:"-categories",level:3},{value:"\ud83e\ude91 Meshes",id:"-meshes",level:3},{value:"\ud83d\uddfa\ufe0f Coordinates",id:"\ufe0f-coordinates",level:4},{value:"\ud83e\udd8b\u27a1\ufe0f\u265f\ufe0f Meshes Items",id:"\ufe0f\ufe0f-meshes-items",level:4},{value:"\ud83d\udc6a Samples",id:"-samples",level:4},{value:"\ud83c\udccf Representations",id:"-representations",level:4},{value:"\ud83c\udfa8 Materials",id:"-materials",level:4},{value:"\ud83e\uddf5 Circle extrusions",id:"-circle-extrusions",level:4},{value:"\ud83d\udc1a Shells",id:"-shells",level:4},{value:"\ud83d\uddfa\ufe0f\ud83d\udccc Local transforms",id:"\ufe0f-local-transforms",level:4},{value:"\ud83c\udf0d\ud83d\udccc Global transforms",id:"-global-transforms",level:4},{value:"\ud83d\uddde\ufe0f\ud83d\udd25 Unique attributes",id:"\ufe0f-unique-attributes",level:3},{value:"\ud83d\uddde\ufe0f Attributes",id:"\ufe0f-attributes",level:3},{value:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb\ud83c\udff7\ufe0f Relations Names",id:"\ufe0f-relations-names",level:3},{value:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb Relations",id:"-relations",level:3},{value:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb\u27a1\ufe0f\u265f\ufe0f Relations Items",id:"\ufe0f\ufe0f-relations-items",level:3},{value:"\ud83e\udd8b Guid",id:"-guid",level:3},{value:"\ud83c\udf33 Spatial structure",id:"-spatial-structure",level:3},{value:"\ud83d\udee3\ufe0f Alignments",id:"\ufe0f-alignments",level:3},{value:"\ud83e\uddca Geometries",id:"-geometries",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"-the-schema",children:"\ud83e\udde9 The schema"}),"\n",(0,s.jsx)(n.h2,{id:"-before-you-start",children:"\ud83d\udeb8 Before you start"}),"\n",(0,s.jsxs)(n.p,{children:["Before reading this page, keep in mind that ",(0,s.jsx)(n.strong,{children:"we've built a whole JavaScript / TypeScript tech stack on top of Fragments"})," to make the heavy lifting for you. If you just want to build BIM software with our libraries, ",(0,s.jsx)(n.strong,{children:"you can happily treat Fragments as a black box"})," without worrying about its internal structure. \ud83d\udce6"]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to ",(0,s.jsx)(n.strong,{children:"build your custom importers / exporters"}),", want to build Fragments ",(0,s.jsx)(n.strong,{children:"custom tools in another programming languages"})," or are just curious about it, go ahead! \ud83e\udee1"]}),"\n",(0,s.jsx)(n.h2,{id:"-introduction",children:"\ud83d\udc7e Introduction"}),"\n",(0,s.jsxs)(n.p,{children:["Fragments is a format built on top of ",(0,s.jsx)(n.a,{href:"https://flatbuffers.dev/",children:"Flatbuffers"}),", an open source libraries to easily create ",(0,s.jsx)(n.strong,{children:"binary formats that are compatible with any programming language"}),". \ud83d\ude0e"]}),"\n",(0,s.jsx)(n.p,{children:"The way flatbuffers work is simple:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["\u270d\ud83c\udffb We ",(0,s.jsx)(n.strong,{children:"create a schema"}),". It's just a text file containing description of the data structures inside your file. The syntax is very simple and similar to C. The extension is .fbs (stands for flatbuffers schema). You can out the fragments schema below."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["\ud83d\udd25 You ",(0,s.jsx)(n.strong,{children:"use that schema"})," file and the flatbuffers library to automatically create an importer / exporter of that file in any programming language. This is covered in the ",(0,s.jsx)(n.a,{href:"https://flatbuffers.dev/",children:"flatbuffers docs"}),". We already did it for TypeScript/JavaScript and included it in our libraries, so you don't have to worry about that one! \ud83d\ude09"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"What about changes?",type:"danger",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Flatbuffers is extensible"}),", so even if we make changes (evolutions) to the schema in the future, it will be backwards compatible! \ud83d\udc1b\u25b6\ufe0f\ud83e\udd8b"]})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"This is the schema file"})," we created for fragments. Don't worry, we will cover it piece by piece in this page!"]}),"\n",(0,s.jsx)("iframe",{src:"https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2FThatOpen%2Fengine_fragment%2Fblob%2Fmain%2Fpackages%2Ffragments%2Fflatbuffers%2Findex.fbs&style=github-dark-dimmed&type=code&showBorder=on&showLineNumbers=on&showFileMeta=on&showFullPath=on&showCopy=on"}),"\n",(0,s.jsx)(n.h2,{id:"-check-it-out",children:"\ud83c\udfe0 Check it out"}),"\n",(0,s.jsxs)(n.p,{children:["Before going in detail into each piece of the Fragments schema, ",(0,s.jsx)(n.strong,{children:"let's check out a minimal Fragments file"})," containing just a simple wall. In this example, you'll be able to see its data following the schema above, which might be useful for understanding how the schema works. ",(0,s.jsx)(n.strong,{children:"You can even load your own IFC STEP files"})," too to see their Fragments schema! \ud83d\ude80"]}),"\n",(0,s.jsx)(n.admonition,{title:"Beware of performance in this demo",type:"tip",children:(0,s.jsxs)(n.p,{children:["Keep in this example we are ",(0,s.jsx)(n.strong,{children:"serializing ALL the data of the file to a JSON"})," just to display it in the screen, which is ",(0,s.jsx)(n.strong,{children:"very, very inneficient"}),", beating Fragments performance benefits. Don't expect this demo to have the same performance as a production Fragmetns app. Avoid loading huge IFCs here if you don't want to see your browser freeze. \ud83d\ude4f\ud83c\udffb"]})}),"\n",(0,s.jsxs)(n.p,{children:["You might want to ",(0,s.jsx)(n.strong,{children:"revisit this example as a reference"})," when trying to generate your own fragment files from IFC STEP or other data sources to have a reference of how it should look like: \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsxs)("div",{style:{position:"relative"},children:[(0,s.jsx)("iframe",{src:"https://thatopen.github.io/engine_fragment/examples/HelloWorldSchema/"}),(0,s.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_fragment/examples/HelloWorldSchema/"),children:" Go Full Screen"})]}),"\n",(0,s.jsx)(n.h2,{id:"-general-notes",children:"\u270d\ud83c\udffb General notes"}),"\n",(0,s.jsxs)(n.p,{children:["There are ",(0,s.jsx)(n.strong,{children:"some decisions"})," we've taken when definining the Fragments data schema whose motivation might not be obvious at first sight. We will cover them here."]}),"\n",(0,s.jsx)(n.h3,{id:"-data-structures",children:"\ud83c\udf71 Data structures"}),"\n",(0,s.jsxs)(n.p,{children:["In some parts of the schema you might find data structured in a specific way. They are not arbitrary: it's the way to be able to ",(0,s.jsx)(n.strong,{children:"open gigabytes of BIM data in seconds"}),". Keep in mind that we designed Fragments for performance, so every indirection decision that you see ",(0,s.jsx)(n.strong,{children:"follows that purpose"}),". \ud83d\ude80"]}),"\n",(0,s.jsx)(n.h3,{id:"-string-arrays",children:"\ud83d\udcc3\ud83d\udcc3\ud83d\udcc3 String arrays"}),"\n",(0,s.jsxs)(n.p,{children:["You will see that in various places we are using ",(0,s.jsx)(n.strong,{children:"string arrays"})," (",(0,s.jsx)(n.code,{children:"categories"}),", ",(0,s.jsx)(n.code,{children:"attributes"}),", ",(0,s.jsx)(n.code,{children:"relations"}),", etc). This might seem inefficient memory-wise at first sight, as when we have an array with multiple strings, each string occupies size, regardless of whether it's duplicated or not. \ud83e\udd14"]}),"\n",(0,s.jsxs)(n.p,{children:["However, ",(0,s.jsx)(n.strong,{children:"flatbuffers allow to define unique strings, automatically deduplicating its size"}),". So this array is as efficient as an array with unique strings and an index to relate them. \ud83c\udf71"]}),"\n",(0,s.jsx)(n.h2,{id:"-model",children:"\ud83e\udde9 Model"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Model"})," is ",(0,s.jsx)(n.strong,{children:"the main object and the entry point"})," of all Fragment files. Each Fragments file has just one model, and it contains all the information of the file.  It has the following structure (we'll cover it step by step): \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Model {\r\n    metadata: string; // JSON string for generic data about the file\r\n\r\n    guids: [string] (required); // An array of Global Unique Identifiers of items. Not all items may have a guid.\r\n    guids_items: [uint] (required); // An array that works as an indexation matching localIds indices with guids.\r\n\r\n    max_local_id: uint; // The smallest localID available when serializing. Used to know the next localID when adding a new item.\r\n    local_ids: [uint] (required); // File specific identification for each item.\r\n\r\n    categories: [string] (required); // An array of all item categories found in the file, stored as strings.\r\n\r\n    meshes: Meshes (required); // The object containing all explicit geometries of the model.\r\n\r\n    unique_attributes: [string]; // An array of unique item attributes in this model.\r\n    attributes: [Attribute]; // An array of items data stored as an array of arrays.\r\n\r\n    relation_names: [string]; // An array of unique relation names in this model.\r\n    relations: [Relation]; // An array of relations between different items stored as arrays of arrays.\r\n    relations_items: [int]; // An array that works as an indexation matching localIds indices with relations.\r\n\r\n    guid: string (required); // An global ID that identifies this model uniquely.\r\n\r\n    spatial_structure: SpatialStructure; // A tree representing the spatial relation between elements.\r\n\r\n    alignments: [Alignment]; // A set of civil alignments for this model\r\n\r\n    geometries: Geometries; // The object containing all implicit geometries of the model.\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-metadata",children:"\ud83d\udccb Metadata"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"JSON string"})," for generic data about the file itself. For example: ",(0,s.jsx)(n.code,{children:'{"schema":"IFC4"}"'}),". \ud83d\udd16\ud83d\udd16\ud83d\udd16"]}),"\n",(0,s.jsx)(n.h3,{id:"-guids",children:"\ud83e\udd8b Guids"}),"\n",(0,s.jsxs)(n.p,{children:["An array of ",(0,s.jsx)(n.strong,{children:"Global Unique Identifiers"})," of items. Not all items may have a guid. They should be consistent across exports from authoring applications. \ud83e\udea8"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f\ufe0f-guids-items",children:"\ud83e\udd8b\u27a1\ufe0f\u265f\ufe0f Guids Items"}),"\n",(0,s.jsxs)(n.p,{children:["An array that works as an indexation matching ",(0,s.jsx)(n.strong,{children:"localIds"})," indices with ",(0,s.jsx)(n.strong,{children:"guids"}),". For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "guids": ["guid-abc", "guid-xyz"],\r\n  "guidsItems": [2, 1],\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that there are 3 items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"first one"})," has localId ",(0,s.jsx)(n.code,{children:"34"})," and no guid."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"second one"})," has localId ",(0,s.jsx)(n.code,{children:"35"})," and guid ",(0,s.jsx)(n.code,{children:"guid-xyz"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"third one"})," has localId ",(0,s.jsx)(n.code,{children:"36"})," and guid ",(0,s.jsx)(n.code,{children:"guid-abc"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-max-local-id",children:"\ud83e\udd47\ud83d\udc1b Max Local Id"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"biggest localID found when serializing plus one"}),". Used to know the ",(0,s.jsx)(n.strong,{children:"next local id available"})," when adding a new item. For example, if when loading an IFC STEP file the item with the highest express id (local id) was ",(0,s.jsx)(n.code,{children:"34928"}),", then the max local id will be ",(0,s.jsx)(n.code,{children:"34929"}),". \ud83d\udd8c\ufe0f"]}),"\n",(0,s.jsx)(n.h3,{id:"-local-ids",children:"\ud83d\udc1b Local Ids"}),"\n",(0,s.jsxs)(n.p,{children:["File specific identification for each item. They might vary with each export from authoring applications. ",(0,s.jsx)(n.strong,{children:"All items must have a local id"}),". If you are exporting Fragments from a data source that doesn't have local ids, you can just use an incremental ",(0,s.jsx)(n.code,{children:"uint"})," starting at 0. \ud83d\udd22"]}),"\n",(0,s.jsx)(n.admonition,{title:"global ids vs local ids",type:"info",children:(0,s.jsxs)(n.p,{children:["You may have noticed that ",(0,s.jsx)(n.strong,{children:"fragments support both global ids (guids) and local ids"}),". The main reason is that ",(0,s.jsx)(n.strong,{children:"global ids are heavy"}),", so if each item had its own global id, the file size would be huge. This also happens in IFC: each item has a local id (express id), and only some items have a global id. \ud83d\udd0e"]})}),"\n",(0,s.jsx)(n.h3,{id:"-categories",children:"\ud83e\uddec Categories"}),"\n",(0,s.jsxs)(n.p,{children:["An array of all item categories (",(0,s.jsx)(n.strong,{children:"arbitrary strings used to classify items"}),") found in the file. Categories are arbitrary, but ",(0,s.jsx)(n.strong,{children:"all items must have a category"}),". For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "categories": ["WALL", "SLAB", "WALL"],\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that there are 3 items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"first one"})," has localId ",(0,s.jsx)(n.code,{children:"34"})," and category ",(0,s.jsx)(n.code,{children:"WALL"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"second one"})," has localId ",(0,s.jsx)(n.code,{children:"35"})," and category ",(0,s.jsx)(n.code,{children:"SLAB"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"third one"})," has localId ",(0,s.jsx)(n.code,{children:"36"})," and category ",(0,s.jsx)(n.code,{children:"WALL"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-meshes",children:"\ud83e\ude91 Meshes"}),"\n",(0,s.jsxs)(n.p,{children:["The object containing all ",(0,s.jsx)(n.strong,{children:"explicit geometries"})," of the model. That is, geometry used for fast visualization, not for modelling. It has the following structure (we'll check all its properties step by step): \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Meshes {\r\n    coordinates: Transform (required); // The global coordinates of the model. Usually used in BIM models to locate the model geographically.\r\n    meshes_items: [uint] (required); // An array that works as an indexation matching localIds indices with meshes.\r\n    samples: [Sample] (required); // An array of all instances of meshes in this model.\r\n    representations: [Representation] (required); // Representations are a common interface for all geometry types. Each representation is an abstraction of a geometry and has its basic information. \r\n    materials: [Material] (required); // The list of unique geometry materials in this model.\r\n    circle_extrusions: [CircleExtrusion] (required); // The list of geometries defined as a wire with thickness. Used mainly for reinforcement bars.\r\n    shells: [Shell] (required); // The list of geometries defined as faces and holes (breps).\r\n    local_transforms: [Transform] (required); // Local transforms of the samples\r\n    global_transforms: [Transform] (required); // A set of local transformations for geometry samples. Each global transformation is assigned to a local id by meshes_items.\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"\ufe0f-coordinates",children:"\ud83d\uddfa\ufe0f Coordinates"}),"\n",(0,s.jsxs)(n.p,{children:["The global coordinates of the model. Usually used in BIM models to ",(0,s.jsx)(n.strong,{children:"locate the model geographically"}),". \ud83c\udf0d"]}),"\n",(0,s.jsx)(n.h4,{id:"\ufe0f\ufe0f-meshes-items",children:"\ud83e\udd8b\u27a1\ufe0f\u265f\ufe0f Meshes Items"}),"\n",(0,s.jsxs)(n.p,{children:["An array that works as an indexation ",(0,s.jsx)(n.strong,{children:"matching localIds indices with meshes"}),". For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "meshes": {\r\n  \t"meshesItems": [0, 2],\r\n  \t... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that there are 3 items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"first one"})," has local id ",(0,s.jsx)(n.code,{children:"34"})," and has assigned the mesh with index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"second one"})," has local id ",(0,s.jsx)(n.code,{children:"35"})," and has no mesh assigned."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"third one"})," has local id ",(0,s.jsx)(n.code,{children:"36"})," and has assigned the mesh with index ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-samples",children:"\ud83d\udc6a Samples"}),"\n",(0,s.jsxs)(n.p,{children:["An array of all ",(0,s.jsx)(n.strong,{children:"instances of explicit geometries"})," in this model. Each sample has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"struct Sample {\r\n    item: uint; // The index of the global transform and item in meshesItems\r\n    material: uint; // The index of the material in materials\r\n    representation: uint; // The index of the representation in representations\r\n    local_transform: uint; // The index of the local transform in localTransforms\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "meshes": {\r\n"meshesItems": [0, 2],\r\n    "samples": [\r\n      {\r\n        "item": 0,\r\n        "material": 0,\r\n        "representation": 0,\r\n        "localTransform": 0\r\n      },\r\n      {\r\n        "item": 1,\r\n        "material": 0,\r\n        "representation": 1,\r\n        "localTransform": 0\r\n      }\r\n    ],\r\n    ... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that there are 3 items:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"second one"})," has localId ",(0,s.jsx)(n.code,{children:"35"})," and has no mesh assigned."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"first one"})," has localId ",(0,s.jsx)(n.code,{children:"34"})," and has assigned the mesh with index ",(0,s.jsx)(n.code,{children:"0"}),". This mesh has a geometry ",(0,s.jsx)(n.code,{children:"sample"})," attached to it, with:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"global transform"})," index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"local transform"})," index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"material"})," index ",(0,s.jsx)(n.code,{children:"0"}),", representation index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"representation"})," index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"third one"})," has localId ",(0,s.jsx)(n.code,{children:"36"})," and has assigned the mesh with index ",(0,s.jsx)(n.code,{children:"1"}),". This mesh has a geometry ",(0,s.jsx)(n.code,{children:"sample"})," attached to it, with:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"global transform"})," index ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"local transform"})," index ",(0,s.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"material"})," index ",(0,s.jsx)(n.code,{children:"0"}),", representation index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"representation"})," index ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u270d\ud83c\udffb So, the conclusions are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There are ",(0,s.jsx)(n.strong,{children:"2 geometric samples"})," (instances)."]}),"\n",(0,s.jsxs)(n.li,{children:["They are attached to ",(0,s.jsx)(n.strong,{children:"different items"})," (and therefore to ",(0,s.jsx)(n.strong,{children:"different global transforms"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["They have ",(0,s.jsx)(n.strong,{children:"different geometries"})," (representations)."]}),"\n",(0,s.jsxs)(n.li,{children:["They share the ",(0,s.jsx)(n.strong,{children:"same material"})," and the ",(0,s.jsx)(n.strong,{children:"same local transformation"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-representations",children:"\ud83c\udccf Representations"}),"\n",(0,s.jsxs)(n.p,{children:["Representations are a ",(0,s.jsx)(n.strong,{children:"common interface for all geometry types"}),". They are an abstraction of a geometry and have its basic information. Each representation has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"enum RepresentationClass:byte {\r\n    NONE = 0, // No representation class\r\n    SHELL = 1, // Shell (brep) representation class\r\n    CIRCLE_EXTRUSION = 2, // Circle extrusion representation class (used for reinforcement bars)\r\n}\r\n\r\nstruct Representation {\r\n    id: uint; // The index of the geometry in its corresponding array\r\n    bbox: BoundingBox; // The bounding box of the geometry\r\n    representation_class: RepresentationClass; // The class of the geometry (in which array it belongs: shells, circleExtrusions, etc.)\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "meshes": {\r\n    "representations": [\r\n      {\r\n        "id": 0,\r\n        "representationClass": 1,\r\n        "bbox": {\r\n          "min": {"x": 0, "y": 0, "z": 0},\r\n          "max": {"x": 1, "y": 1, "z": 1},\r\n        }\r\n      },\r\n    ],\r\n    ... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["There is 1 ",(0,s.jsx)(n.code,{children:"representation"})," (",(0,s.jsx)(n.strong,{children:"geometry"}),") in this model with a ",(0,s.jsx)(n.code,{children:"bounding box"})," of 1x1x1."]}),"\n",(0,s.jsxs)(n.li,{children:["It's of type ",(0,s.jsx)(n.code,{children:"SHELL"}),", so its geometry data is ",(0,s.jsx)(n.strong,{children:"the element with index"})," ",(0,s.jsx)(n.code,{children:"0"})," in ",(0,s.jsx)(n.code,{children:"model.meshes.shells"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"-materials",children:"\ud83c\udfa8 Materials"}),"\n",(0,s.jsxs)(n.p,{children:["The list of ",(0,s.jsx)(n.strong,{children:"unique materials"})," in this model. Materials are defined by color, opacity, sidedness and line type (if any). Each material has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"enum RenderedFaces:byte {\r\n    ONE = 0, // One rendered face\r\n    TWO = 1 // Two rendered faces\r\n}\r\n\r\nstruct Material {\r\n    r: ubyte; // Red color value\r\n    g: ubyte; // Green color value\r\n    b: ubyte; // Blue color value\r\n    a: ubyte; // Alpha color value\r\n    rendered_faces: RenderedFaces; // Number of rendered faces\r\n    stroke: Stroke; // Line stroke type\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"-circle-extrusions",children:"\ud83e\uddf5 Circle extrusions"}),"\n",(0,s.jsxs)(n.p,{children:["The list of geometries defined as ",(0,s.jsx)(n.strong,{children:"a wire with a thickness"}),". \ud83e\udea1"]}),"\n",(0,s.jsx)(n.admonition,{title:"Why specifically circle extrusions?",type:"info",children:(0,s.jsxs)(n.p,{children:["We use this type of representation mainly for ",(0,s.jsx)(n.strong,{children:"reinforcement bars"}),", which are very computationally demanding and ",(0,s.jsx)(n.strong,{children:"don't work well when represented as any other generic mesh"}),". Using this specific geometry we can easily render dozens of thousands of rebars with ease."]})}),"\n",(0,s.jsx)(n.p,{children:"Each circle extrusion has the following structure: \ud83d\uddfc"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"enum AxisPartClass:byte {\r\n    NONE = 0, // No axis part class\r\n    WIRE = 1, // Straight line axis part class\r\n    WIRE_SET = 2, // Straight line set axis part class\r\n    CIRCLE_CURVE = 3 // Circular arc axis part class\r\n}\r\n\r\nstruct Wire {\r\n    p1: FloatVector; // First point of the wire\r\n    p2: FloatVector; // Last point of the wire\r\n}\r\n\r\ntable WireSet {\r\n    ps: [FloatVector]; // Ordered points of the wire set\r\n}\r\n\r\nstruct CircleCurve {\r\n    aperture: float; // Angle of the arc\r\n    position: FloatVector; // Center of the arc\r\n    radius: float; // Radius of the arc\r\n    x_direction: FloatVector; // X axis of the arc\r\n    y_direction: FloatVector; // Y axis of the arc\r\n}\r\n\r\ntable Axis {\r\n    wires: [Wire] (required); // Straight lines of the axis\r\n    order: [uint] (required); // Indices of the axis parts\r\n    parts: [AxisPartClass] (required); // Class of the axis parts\r\n    wire_sets: [WireSet] (required); // Straight line sets of the axis\r\n    circle_curves: [CircleCurve] (required); // Circular arcs of the axis\r\n}\r\n\r\ntable CircleExtrusion {\r\n    radius: [double] (required); // Half of the thickness of the circle extrusion\r\n    axes: [Axis] (required); // Axes of the circle extrusion\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a Fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "meshes": {\r\n    "representations": [\r\n      {\r\n        "id": 0,\r\n        "representationClass": 2,\r\n        "bbox": {\r\n          "min": {"x": 2.49, "y": 0.01, "z": 0.20},\r\n          "max": {"x": -2.49, "y": -0.01, "z": -0.20},\r\n        }\r\n      },\r\n    ],\r\n    "circleExtrusions": [\r\n      {\r\n        "radius": [0.01],\r\n        "axes": [\r\n          {\r\n            "wires": [\r\n              {\r\n                "p1": { "x": 2.48, "y": 0, "z": 0.09 },\r\n                "p2": { "x": 2.48, "y": 0, "z": -0.20 },\r\n              },\r\n              {\r\n                "p1": { "x": -2.39, "y": 4.22, "z": 0.19 },\r\n                "p2": { "x": 2.38, "y": 4.21, "z": 0.19 },\r\n              }\r\n            ],\r\n            "order": [0, 0, 1],\r\n            "parts": [1, 3, 1],\r\n            "wire_sets": [],\r\n            "circle_curves": [\r\n              {\r\n                "aperture": 1.57,\r\n                "position": { "x":  2.38, "y": 1.11, "z": 0.097 },\r\n                "radius": 0.09,\r\n                "x_direction": { "x": 0, "y": 1, "z": 0 },\r\n                "y_direction": { "x": 0, "y": 0, "z": 1 },\r\n              }\r\n            ],\r\n          }\r\n        ]\r\n      },\r\n    ],\r\n    ... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has a single ",(0,s.jsx)(n.code,{children:"representation"})," that is an ",(0,s.jsx)(n.code,{children:"extrusion curve"})," (probably a ",(0,s.jsx)(n.strong,{children:"rebar"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:["The rebar has a single axis made of 3 parts: ",(0,s.jsx)(n.strong,{children:"2 straight lines and 1 circular arc"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The order of the parts is: ",(0,s.jsx)(n.code,{children:"line 0"})," - ",(0,s.jsx)(n.code,{children:"arc 0"})," - ",(0,s.jsx)(n.code,{children:"line 1"})," (looking at ",(0,s.jsx)(n.code,{children:"parts"})," and ",(0,s.jsx)(n.code,{children:"order"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u270d\ud83c\udffb So, the conclusion is that it's a ",(0,s.jsx)(n.strong,{children:"bar with a circular bend"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"-shells",children:"\ud83d\udc1a Shells"}),"\n",(0,s.jsxs)(n.p,{children:["The list of ",(0,s.jsx)(n.strong,{children:"geometries defined as face profiles and holes"}),", similar to breps. Used for the vast majority of meshes. Each shell has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"enum ShellType:byte {\r\n    NONE = 0, // Default shell type (less than 65535 points)\r\n    BIG = 1, // Big shell type (less than 4294967295 points)\r\n}\r\n\r\ntable ShellHole {\r\n    indices: [ushort] (required); // Indices of the points of the hole\r\n    profile_id: ushort; // Index of the profile to which the hole belongs\r\n}\r\n\r\ntable ShellProfile {\r\n    indices: [ushort] (required); // Indices of the points of the profile\r\n}\r\n\r\ntable BigShellHole {\r\n    indices: [uint] (required); // Indices of the points of the hole\r\n    profile_id: ushort; // Index of the profile to which the hole belongs\r\n}\r\n\r\ntable BigShellProfile {\r\n    indices: [uint] (required); // Indices of the points of the profile\r\n}\r\n\r\ntable Shell {\r\n    profiles: [ShellProfile] (required); // Exterior profiles of the shell\r\n    holes: [ShellHole] (required); // Holes of the shell\r\n    points: [FloatVector] (required); // Points of the shell\r\n    big_profiles: [BigShellProfile] (required); // Exterior profiles of the shell (if the shell has more than 65535 points)\r\n    big_holes: [BigShellHole] (required); // Holes of the shell (if the shell has more than 65535 points)\r\n    type: ShellType; // Type of the shell (less than 65535 points or more than 65535 points)\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Why shell types?",type:"danger",children:(0,s.jsxs)(n.p,{children:["Shells can be of 2 types: default or big. Big shells consume more memory and are ",(0,s.jsx)(n.strong,{children:"only used for shells with more than 65,535 points"})," (which is the max ushort value). This way we have the way of both worlds: meshes that don't consume a lot of memory, while supporting certain big objects. Big shells are rare in BIM, being less than 1% of objects. \u2728"]})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "meshes": {\r\n    "representations": [\r\n      {\r\n        "id": 0,\r\n        "representationClass": 1,\r\n        "bbox": {\r\n          "min": {"x": 0, "y": 0, "z":0},\r\n          "max": {"x": 1, "y": 1, "z": 1},\r\n        }\r\n      },\r\n    ],\r\n    "shells": [\r\n      {\r\n        "type": 0,\r\n        "points": [\r\n          {"x": 0, "y": 0, "z":0},\r\n          {"x": 1, "y": 0, "z":0},\r\n          {"x": 0, "y": 1, "z":1},\r\n          {"x": 0, "y": 0, "z":1},\r\n          {"x": 0.25, "y": 0.25, "z":0.25},\r\n          {"x": 0.75, "y": 0.25, "z":0.25},\r\n          {"x": 0.25, "y": 0.75, "z":0.75},\r\n          {"x": 0.25, "y": 0.25, "z":0.75},\r\n        ],\r\n        "profiles": [\r\n          { "indices": [0, 1, 2, 3] },\r\n        ],\r\n        "holes": [\r\n          { "indices": [4, 5, 6, 7], "profileId": 0 },\r\n        ],\r\n        "bigProfiles": [],\r\n        "bigHoles": [],\r\n      },\r\n    ],\r\n    ... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has a ",(0,s.jsx)(n.strong,{children:"single representation"})," that is a ",(0,s.jsx)(n.code,{children:"shell"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The shell has ",(0,s.jsx)(n.strong,{children:"8 points"}),", ",(0,s.jsx)(n.strong,{children:"1 exterior profile"})," and ",(0,s.jsx)(n.strong,{children:"1 hole"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["It's probably ",(0,s.jsx)(n.strong,{children:"a square face with a square hole inside"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"\ufe0f-local-transforms",children:"\ud83d\uddfa\ufe0f\ud83d\udccc Local transforms"}),"\n",(0,s.jsxs)(n.p,{children:["A set of ",(0,s.jsx)(n.strong,{children:"local transformations for geometry samples"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Always use local transformations",type:"info",children:[(0,s.jsxs)(n.p,{children:["All samples require a local transformation. For samples that have no local transformation, we use a ",(0,s.jsx)(n.strong,{children:"no-transform transformation"}),": \u27bf"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "position": {"x": 0, "y": 0, "z": 0},\r\n  "xDirection": {"x": 1, "y": 0, "z": 0},\r\n  "yDirection": {"x": 0, "y": 1, "z": 0},\r\n}\n'})})]}),"\n",(0,s.jsx)(n.h4,{id:"-global-transforms",children:"\ud83c\udf0d\ud83d\udccc Global transforms"}),"\n",(0,s.jsxs)(n.p,{children:["A set of ",(0,s.jsx)(n.strong,{children:"global transformations for geometry samples"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:'What is a "bim object" in fragments?',type:"tip",children:[(0,s.jsxs)(n.p,{children:["Each global transformation is assigned to an item local id by ",(0,s.jsx)(n.code,{children:"meshesItems"}),". This means that:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"There can't be a global trasformation that is not assigned to an item."}),"\n",(0,s.jsxs)(n.li,{children:["If an item has a geometry representation, it needs at least a global transform assigned to it via ",(0,s.jsx)(n.code,{children:"meshesItems"}),". Remember that all items have local ids."]}),"\n",(0,s.jsx)(n.li,{children:"Items without geometry representation don't have a global transform assigned to them."}),"\n"]}),(0,s.jsxs)(n.p,{children:["\ud83d\ude80 So if you have a BIM model containing just one chair made of 3 geometry instances, then you will have at least ",(0,s.jsx)(n.strong,{children:"1 item"})," (local id), ",(0,s.jsx)(n.strong,{children:"1 global transform"})," assigned to it, and ",(0,s.jsx)(n.strong,{children:"3 samples"})," assigned to that global transform. ",(0,s.jsx)(n.strong,{children:'In fragments, a "BIM object" is just a set of geometry samples assigned to the same global transform'})," (which means they are assigned to the same item / local id). This approach allows to ",(0,s.jsx)(n.strong,{children:"reuse geometries, transforms and materials"})," across items."]})]}),"\n",(0,s.jsx)(n.p,{children:"For instance, a fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "meshes": {\r\n    "meshesItems": [2, 0, 1],\r\n    "globalTransforms": [\r\n      {\r\n        "position": {"x": 0, "y": 0, "z": 0},\r\n        "xDirection": {"x": 1, "y": 0, "z": 0},\r\n        "yDirection": {"x": 0, "y": 1, "z": 0},\r\n      },\r\n      {\r\n        "position": {"x": 1, "y": 0, "z": 0},\r\n        "xDirection": {"x": 1, "y": 0, "z": 0},\r\n        "yDirection": {"x": 0, "y": 1, "z": 0},\r\n      },\r\n      {\r\n        "position": {"x": 0, "y": 0, "z": 1},\r\n        "xDirection": {"x": 1, "y": 0, "z": 0},\r\n        "yDirection": {"x": 0, "y": 1, "z": 0},\r\n      },\r\n    ],\r\n    ... \r\n  },\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has ",(0,s.jsx)(n.strong,{children:"3 items"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The 3 items have global transforms, so ",(0,s.jsx)(n.strong,{children:"they likely have some geometry samples representing them"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"first global transform"})," is assigned to the item with local id ",(0,s.jsx)(n.code,{children:"36"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"second global transform"})," is assigned to the item with local id ",(0,s.jsx)(n.code,{children:"35"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"third global transform"})," is assigned to the item with local id ",(0,s.jsx)(n.code,{children:"34"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-unique-attributes",children:"\ud83d\uddde\ufe0f\ud83d\udd25 Unique attributes"}),"\n",(0,s.jsxs)(n.p,{children:["An array of ",(0,s.jsx)(n.strong,{children:"unique item attributes"})," in this model. \ud83d\udcc3"]}),"\n",(0,s.jsx)(n.admonition,{title:"attributes vs unique attributes",type:"info",children:(0,s.jsxs)(n.p,{children:["Yes, you might have noticed that Fragments have both ",(0,s.jsx)(n.code,{children:"attributes"})," and ",(0,s.jsx)(n.code,{children:"uniqueAttributes"}),". The reason is that some use cases require to get the full deduplicated list of attributes very fast, and this is why ",(0,s.jsx)(n.code,{children:"uniqueAttributes"})," exists. This doesn't have a memory impact ",(0,s.jsx)(n.a,{href:"#-string-arrays",children:"thanks to this"}),". \ud83e\udd2f"]})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-attributes",children:"\ud83d\uddde\ufe0f Attributes"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"array of item data"})," stored as an array of arrays. Each attribute has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Attribute {\r\n    data: [string] (required); // The attributes of an item, represented as an array of strings\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a fragments file with the following data: \ud83d\udc47\ud83c\udffb"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "attributes": [\r\n    {\r\n      data: [\r\n        "["Name","Basic Wall 1","IFCLABEL"]",\r\n      ]\r\n    },\r\n    {\r\n      data: [\r\n        "["Name","Basic Wall 2","IFCLABEL"]",\r\n      ]\r\n    },\r\n    {\r\n      data: [\r\n        "["Name","Basic Wall 3","IFCLABEL"]",\r\n      ]\r\n    }\r\n  ],\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has ",(0,s.jsx)(n.strong,{children:"3 items"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The item with ",(0,s.jsx)(n.strong,{children:"local id"})," ",(0,s.jsx)(n.code,{children:"34"})," has an attribute ",(0,s.jsx)(n.code,{children:'"Name"'})," with value ",(0,s.jsx)(n.code,{children:'"Basic Wall 1"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The item with ",(0,s.jsx)(n.strong,{children:"local id"})," ",(0,s.jsx)(n.code,{children:"35"})," has an attribute ",(0,s.jsx)(n.code,{children:'"Name"'})," with value ",(0,s.jsx)(n.code,{children:'"Basic Wall 2"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The item with ",(0,s.jsx)(n.strong,{children:"local id"})," ",(0,s.jsx)(n.code,{children:"36"})," has an attribute ",(0,s.jsx)(n.code,{children:'"Name"'})," with value ",(0,s.jsx)(n.code,{children:'"Basic Wall 3"'}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{title:"Always use attributes",type:"info",children:[(0,s.jsxs)(n.p,{children:["All samples require an attributes entry. For samples that have no attributes (which is rare in BIM), we use an ",(0,s.jsx)(n.strong,{children:"empty attributes entry"}),": \u27bf"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34],\r\n  "attributes": [\r\n    {\r\n      data: []\r\n    },\r\n  ],\r\n  ...\r\n}\n'})})]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-relations-names",children:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb\ud83c\udff7\ufe0f Relations Names"}),"\n",(0,s.jsxs)(n.p,{children:["An array of ",(0,s.jsx)(n.strong,{children:"relation identifiers"})," in this model."]}),"\n",(0,s.jsx)(n.h3,{id:"-relations",children:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb Relations"}),"\n",(0,s.jsxs)(n.p,{children:["An array of ",(0,s.jsx)(n.strong,{children:"relations between different items"})," stored as arrays of arrays. We use this data structure for the same optimization reason as for attributes. Each relation has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Relation {\r\n    data: [string] (required); // The relation of an item, represented as an array of strings\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f\ufe0f-relations-items",children:"\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udffb\u27a1\ufe0f\u265f\ufe0f Relations Items"}),"\n",(0,s.jsxs)(n.p,{children:["An array that works as an ",(0,s.jsx)(n.strong,{children:"indexation matching localIds indices with relations"}),", similar to ",(0,s.jsx)(n.code,{children:"meshesItems"}),". For instance, a fragments file with the following data:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "relationsItems": [1],\r\n  "relations": [\r\n    {\r\n      data: [\r\n        "["IsDecomposedBy", 34]",\r\n        "["IsDecomposedBy", 36]",\r\n      ]\r\n    },\r\n  ],\r\n  ...\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has ",(0,s.jsx)(n.strong,{children:"3 items"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The item with local id ",(0,s.jsx)(n.code,{children:"35"})," has ",(0,s.jsx)(n.strong,{children:"2 relations"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The relations are with items ",(0,s.jsx)(n.code,{children:"34"})," and ",(0,s.jsx)(n.code,{children:"36"})," respectively and named ",(0,s.jsx)(n.code,{children:'"IsDecomposedBy"'}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-guid",children:"\ud83e\udd8b Guid"}),"\n",(0,s.jsxs)(n.p,{children:["An global ID that ",(0,s.jsx)(n.strong,{children:"identifies this model uniquely"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"-spatial-structure",children:"\ud83c\udf33 Spatial structure"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.strong,{children:"tree representing the spatial hierarchy"})," of elements. It has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table SpatialStructure {\r\n    local_id: uint = null; // Local id of the current spatial node\r\n    category: string; // Category of the current spatial node\r\n    children: [SpatialStructure]; // Child spatial nodes of the current spatial node\r\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Recursive and grouped",type:"info",children:(0,s.jsxs)(n.p,{children:["As you can see, ",(0,s.jsx)(n.strong,{children:"the structure is recursive"}),", so you can build a whole tree with it. We use this structure to ",(0,s.jsx)(n.strong,{children:"group items of the same category together"}),", as shown in the example below. \ud83c\udf71"]})}),"\n",(0,s.jsx)(n.p,{children:"For instance, a typical spatial tree can look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n  "localIds": [34, 35, 36],\r\n  "spatialStructure": {\r\n    "localId": null,\r\n    "category": "IFCPROJECT",\r\n    "children": [\r\n      {\r\n        "localId": 34,\r\n        "category": null,\r\n        "children": [\r\n          {\r\n            "localId": null,\r\n            "category": "IFCSITE",\r\n            "children": [\r\n              {\r\n                "localId": 35,\r\n                "category": null,\r\n                "children": [\r\n                  {\r\n                    "localId": null,\r\n                    "category": "IFCBUILDINGSTOREY",\r\n                    "children": [\r\n                      {\r\n                        "localId": 36,\r\n                        "category": null,\r\n                        "children": []\r\n                      }\r\n                    ]\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    ...\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\ud83e\uddd0 Means that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This model has ",(0,s.jsx)(n.strong,{children:"3 items"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Their categories are ",(0,s.jsx)(n.strong,{children:"IFCPROJECT"}),", ",(0,s.jsx)(n.strong,{children:"IFCSITE"})," and ",(0,s.jsx)(n.strong,{children:"IFCBUILDINGSTOREY"})," respectively."]}),"\n",(0,s.jsxs)(n.li,{children:["They form a ",(0,s.jsx)(n.strong,{children:"spatial tree"})," where ",(0,s.jsx)(n.code,{children:"36"})," is a child of ",(0,s.jsx)(n.code,{children:"35"}),", which is a child of ",(0,s.jsx)(n.code,{children:"34"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-alignments",children:"\ud83d\udee3\ufe0f Alignments"}),"\n",(0,s.jsxs)(n.p,{children:["A set of ",(0,s.jsx)(n.strong,{children:"civil alignments"})," for this model. Each alignment has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Alignment {\r\n    absolute: [uint]; // Geometry representation ids for the absolute respresentation of this alignment\r\n    horizontal: [uint]; // Geometry representation ids for the horizontal respresentation of this alignment\r\n    vertical: [uint]; // Geometry representation ids for the vertical respresentation of this alignment\r\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Just ids?",type:"tip",children:(0,s.jsxs)(n.p,{children:["Alignments don't use ",(0,s.jsx)(n.code,{children:"meshes"})," (explicit), but ",(0,s.jsx)(n.code,{children:"geometries"})," (implicit) to save space and get an exact definition."]})}),"\n",(0,s.jsx)(n.h3,{id:"-geometries",children:"\ud83e\uddca Geometries"}),"\n",(0,s.jsxs)(n.p,{children:["The object containing ",(0,s.jsx)(n.strong,{children:"all implicit geometries"})," of the model. Used for ",(0,s.jsx)(n.strong,{children:"modelling"}),", as well as certain entities that have an implicit representation, like ",(0,s.jsx)(n.strong,{children:"alignments"})," or ",(0,s.jsx)(n.strong,{children:"grids"}),". It has the following structure: \ud83d\uddfc"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"table Geometries {\r\n    samples: [GeometrySample] (required); // An array of implicit geometry samples\r\n    sample_ids: [uint]; // An array of ids for the implicit geometry samples\r\n    representations: [GeometryRepresentation] (required); // An array of implicit geometry representations\r\n    representation_ids: [uint]; // An array of ids for the implicit geometry representations\r\n    transforms: [Transform] (required); // An array of implicit geometry transforms\r\n    transform_ids: [uint]; // An array of ids for the implicit geometry transforms\r\n    representations_samples: [uint]; // An array of id pairs that work as an indexation matching mesh representations ids with implicit samples ids\r\n    lines: [GeometryLines] (required); // An array of implicit geometry lines\r\n    walls: [GeometryWall]; // An array of implicit geometry walls\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"samples"})," and ",(0,s.jsx)(n.code,{children:"representations"})," work similarly to the ones in ",(0,s.jsx)(n.code,{children:"Meshes"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"What about other geometries?",type:"danger",children:(0,s.jsxs)(n.p,{children:["This is still a work in progress, ",(0,s.jsx)(n.strong,{children:"so more entities might appear"})," here as the Fragments Schema evolves and we develop a modelling API. \ud83e\udee1"]})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);