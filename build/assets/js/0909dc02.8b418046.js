"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[8458],{5461:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(4848),a=t(8453);const i={},r=void 0,l={id:"Tutorials/Components/Front/CivilNavigators",title:"CivilNavigators",description:'window.open("https://thatopen.github.io/engine_components/examples/CivilNavigators")} >Go Full Screen',source:"@site/docs/Tutorials/Components/Front/CivilNavigators.mdx",sourceDirName:"Tutorials/Components/Front",slug:"/Tutorials/Components/Front/CivilNavigators",permalink:"/Tutorials/Components/Front/CivilNavigators",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AreaMeasurement",permalink:"/Tutorials/Components/Front/AreaMeasurement"},next:{title:"ClipStyler",permalink:"/Tutorials/Components/Front/ClipStyler"}},s={},c=[{value:"\ud83d\udee3\ufe0f Navigating 3D infrastructures",id:"\ufe0f-navigating-3d-infrastructures",level:3},{value:"\ud83d\udd96 Importing our Libraries",id:"-importing-our-libraries",level:3},{value:"\ud83c\udf0e Setting up a simple scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83e\uddf3 Loading a BIM model",id:"-loading-a-bim-model",level:3},{value:"\ud83d\ude95 Setting up a Civil Navigator",id:"-setting-up-a-civil-navigator",level:3},{value:"\u23f1\ufe0f Measuring the performance (optional)",id:"\ufe0f-measuring-the-performance-optional",level:3},{value:"\ud83e\udde9 Adding some UI",id:"-adding-some-ui",level:3},{value:"\ud83c\udf89 Wrap up",id:"-wrap-up",level:3}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{style:{position:"relative"},children:[(0,o.jsx)("iframe",{src:"https://thatopen.github.io/engine_components/examples/CivilNavigators"}),(0,o.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_components/examples/CivilNavigators"),children:"Go Full Screen"})]}),"\n",(0,o.jsx)(e.admonition,{title:"Source",type:"info",children:(0,o.jsxs)(e.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,o.jsx)(e.a,{href:"https://github.com/ThatOpen/engine_components/blob/main/packages/front/src/civil/CivilNavigators/example.ts",children:"here"}),"."]})}),"\n",(0,o.jsx)(e.h3,{id:"\ufe0f-navigating-3d-infrastructures",children:"\ud83d\udee3\ufe0f Navigating 3D infrastructures"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"Infra models are awesome, but they are usually very, very long and thin. This makes it a bit hard to navigate through them. Luckily for you, the alignment data that comes in IFC models is processed by our libraries and generated in 2D and 3D, so you can use it for navigation!"}),"\n",(0,o.jsx)(e.h3,{id:"-importing-our-libraries",children:"\ud83d\udd96 Importing our Libraries"}),"\n",(0,o.jsx)(e.p,{children:"First things first, let's install all necessary dependencies to make this example work:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'import * as THREE from "three";\nimport * as OBC from "@thatopen/components";\nimport * as CUI from "@thatopen/ui-obc";\nimport Stats from "stats.js";\nimport * as BUI from "@thatopen/ui";\n// You have to import * as OBF from "@thatopen/components-front"\nimport * as OBF from "../..";\n'})}),"\n",(0,o.jsx)(e.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a simple scene"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"We will start by creating a simple scene with a camera and a renderer. If you don't know how to set up a scene, you can check the Worlds tutorial."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const container = document.getElementById("container")!;\n\nconst components = new OBC.Components();\n\nconst worlds = components.get(OBC.Worlds);\n\nconst world = worlds.create<\n  OBC.SimpleScene,\n  OBC.SimpleCamera,\n  OBF.RendererWith2D\n>();\n\nworld.scene = new OBC.SimpleScene(components);\nworld.renderer = new OBF.RendererWith2D(components, container);\nworld.camera = new OBC.SimpleCamera(components);\n\ncomponents.init();\n\nBUI.Manager.init();\nCUI.Manager.init();\n\nworld.scene.setup();\n\nworld.camera.controls.setLookAt(5, 5, 5, 0, 0, 0);\n\ncontainer.appendChild(world.renderer.three2D.domElement);\n\nconst grids = components.get(OBC.Grids);\ngrids.create(world);\n\nworld.camera.three.far = 10000;\nworld.camera.three.updateProjectionMatrix();\n'})}),"\n",(0,o.jsx)(e.p,{children:"We'll make the background of the scene transparent so that it looks good in our docs page, but you don't have to do that in your app!"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:"world.scene.three.background = null;\n"})}),"\n",(0,o.jsx)(e.h3,{id:"-loading-a-bim-model",children:"\ud83e\uddf3 Loading a BIM model"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"We'll start by adding a BIM model to our scene. That model is already converted to fragments, so it will load much faster than if we loaded the IFC file."}),"\n",(0,o.jsx)(e.admonition,{title:"Fragments?",type:"tip",children:(0,o.jsx)(e.p,{children:"If you are not familiar with fragments, check out the IfcLoader tutorial!"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const fragments = components.get(OBC.FragmentsManager);\nconst githubUrl =\n  "https://thatopen.github.io/engine_fragment/resources/worker.mjs";\nconst fetchedUrl = await fetch(githubUrl);\nconst workerBlob = await fetchedUrl.blob();\nconst workerFile = new File([workerBlob], "worker.mjs", {\n  type: "text/javascript",\n});\nconst workerUrl = URL.createObjectURL(workerFile);\nfragments.init(workerUrl);\n\nconst url =\n  "https://thatopen.github.io/engine_components/resources/frags/small_road.frag";\nconst file = await fetch(url);\nconst data = await file.arrayBuffer();\nconst buffer = new Uint8Array(data);\nconst model = await fragments.core.load(buffer, {\n  modelId: url,\n  camera: world.camera.three,\n});\nworld.scene.three.add(model.object);\n\nawait fragments.core.update(true);\n\nworld.camera.controls.addEventListener("control", () =>\n  fragments.core.update(),\n);\n\nmodel.getClippingPlanesEvent = () => {\n  return Array.from(world.renderer!.three.clippingPlanes) || [];\n};\n\nconst alignments = await model.getAlignments();\nworld.scene.three.add(alignments);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"-setting-up-a-civil-navigator",children:"\ud83d\ude95 Setting up a Civil Navigator"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"Now, we need to create an instance of the Civil 3D Navigator component. This will enable us to navigate through our 3D environment and interact with the model."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const navigators = components.get(OBF.CivilNavigators);\n\nconst navigator = navigators.create("absolute");\nnavigator.world = world;\n\n// For now we don\'t read the initial station of alignments. You can set it like this:\nfor (const alignment of alignments.children) {\n  alignment.userData.initialStation = 1925;\n}\n\nnavigator.alignments.push(alignments);\nnavigator.updateAlignments();\nconsole.log(alignments);\n\nconst sphere = new THREE.Sphere(undefined, 20);\nnavigator.onMarkerChange.add(({ point }) => {\n  sphere.center.copy(point);\n  world.camera.controls.fitToSphere(sphere, true);\n});\n\nconst crossSectionNavigator = components.get(OBF.CivilCrossSectionNavigator);\ncrossSectionNavigator.world = world;\n'})}),"\n",(0,o.jsx)(e.p,{children:"We will also create another navigator for the horizontal alignments, so that we can navigate the road both in 2D and 3D."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const horizontalMenu = document.getElementById("horizontal-menu")!;\n\nconst horizontalWorld = document.createElement("bim-world-2d") as CUI.World2D;\nhorizontalWorld.components = components;\nif (!horizontalWorld.world) {\n  throw new Error("World not found!");\n}\n\nhorizontalMenu.appendChild(horizontalWorld);\n\nconst horizontalNavigator = navigators.create("horizontal");\nhorizontalNavigator.world = horizontalWorld.world;\nconst horizontalAlignments = await model.getHorizontalAlignments();\nfor (const alignment of horizontalAlignments.children) {\n  alignment.rotation.x = Math.PI / 2;\n  alignment.rotation.y = Math.PI / 2;\n}\nhorizontalNavigator.alignments.push(horizontalAlignments);\nhorizontalNavigator.updateAlignments();\nconst horizontalScene = horizontalWorld.world.scene.three;\nhorizontalScene.background = null;\nhorizontalScene.add(horizontalAlignments);\n'})}),"\n",(0,o.jsx)(e.p,{children:"Now it's time to synchronize both alignments. We can do this using the events provided by each alignment we created:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'for (const alignment of horizontalAlignments.children) {\n  alignment.userData.initialStation = 1925;\n}\n\nnavigator.onMarkerChange.add((civilPoint) => {\n  console.log(civilPoint);\n  const percentage = OBF.CivilUtils.curvePointToAlignmentPercentage(\n    civilPoint.alignment,\n    civilPoint.point,\n    civilPoint.curve,\n  );\n  if (percentage === null) {\n    return;\n  }\n  const point = OBF.CivilUtils.alignmentPercentageToPoint(\n    horizontalAlignments.children[0] as THREE.Group,\n    percentage,\n  );\n  if (point === null) {\n    return;\n  }\n  horizontalNavigator.setMarkerAtPoint(point, "select");\n  horizontalNavigator.setCursorValue(navigator.getCursorValue(), "select");\n});\n\nconst casters = components.get(OBC.Raycasters);\nconst horizontalCaster = casters.get(horizontalWorld.world);\nhorizontalCaster.three.params.Line.threshold = 10;\n\nawait horizontalWorld.world.camera.controls.setLookAt(\n  0,\n  0,\n  10000,\n  0,\n  0,\n  0,\n  false,\n);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"\ufe0f-measuring-the-performance-optional",children:"\u23f1\ufe0f Measuring the performance (optional)"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.p,{children:["We'll use the ",(0,o.jsx)(e.a,{href:"https://github.com/mrdoob/stats.js",children:"Stats.js"})," to measure the performance of our app. We will add it to the top left corner of the viewport. This way, we'll make sure that the memory consumption and the FPS of our app are under control."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const stats = new Stats();\nstats.showPanel(2);\ndocument.body.append(stats.dom);\nstats.dom.style.left = "0px";\nstats.dom.style.zIndex = "unset";\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,o.jsx)(e.h3,{id:"-adding-some-ui",children:"\ud83e\udde9 Adding some UI"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.p,{children:["We will use the ",(0,o.jsx)(e.code,{children:"@thatopen/ui"})," library to add some simple and cool UI elements to our app:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'let selectedAlignment = 0;\nlet updateTimeout: any = null;\nlet alignmentCounter = 0;\nlet highlightSelected = true;\nlet showStations = false;\n\nfunction updateHighlight() {\n  const selected = alignments.children[selectedAlignment] as THREE.Group;\n  const horizontalSelected = horizontalAlignments.children[\n    selectedAlignment\n  ] as THREE.Group;\n  if (highlightSelected) {\n    navigator.highlight(selected);\n    horizontalNavigator.highlight(horizontalSelected);\n  } else {\n    navigator.clearHighlight();\n    horizontalNavigator.clearHighlight();\n  }\n}\nupdateHighlight();\n\nlet previousSelection = -1;\nfunction updateStations() {\n  if (previousSelection !== selectedAlignment) {\n    navigator.clearStations();\n  }\n  previousSelection = selectedAlignment;\n  const selected = alignments.children[selectedAlignment] as THREE.Group;\n  if (showStations) {\n    navigator.createStations(selected);\n    navigator.updateStations();\n  } else {\n    navigator.clearStations();\n  }\n}\n\nfunction moveToPercentage(percentage: number) {\n  const absolutePoint = OBF.CivilUtils.alignmentPercentageToPoint(\n    alignments.children[selectedAlignment] as THREE.Group,\n    percentage,\n  );\n  if (absolutePoint) {\n    sphere.center.copy(absolutePoint.point);\n    world.camera.controls.fitToSphere(sphere, true);\n    navigator.setMarkerAtPoint(absolutePoint, "select");\n    crossSectionNavigator.set(absolutePoint.point, absolutePoint.normal);\n    if (updateTimeout) {\n      clearTimeout(updateTimeout);\n    }\n    crossSectionNavigator.sectionVisible = false;\n    updateTimeout = setTimeout(() => {\n      if (crossSectionNavigator.plane.enabled) {\n        crossSectionNavigator.update();\n      }\n    }, 1000);\n    // Update kps only if the cross section is enabled\n    if (showStations && crossSectionNavigator.plane.enabled) {\n      updateStations();\n    }\n  }\n\n  const horizontalPoint = OBF.CivilUtils.alignmentPercentageToPoint(\n    horizontalAlignments.children[selectedAlignment] as THREE.Group,\n    percentage,\n  );\n  if (horizontalPoint) {\n    horizontalNavigator.setMarkerAtPoint(horizontalPoint, "select");\n    horizontalNavigator.setCursorValue(navigator.getCursorValue(), "select");\n  }\n}\n\nconst debounce = 1000;\nlet lastUpdate = 0;\nworld.camera.controls.addEventListener("update", () => {\n  const now = Date.now();\n  if (now - lastUpdate > debounce) {\n    updateStations();\n    lastUpdate = now;\n  }\n});\n\nworld.camera.controls.addEventListener("update", () => {\n  const now = Date.now();\n  if (now - lastUpdate > debounce) {\n    updateStations();\n    lastUpdate = now;\n  }\n});\n\nconst panel = BUI.Component.create<BUI.PanelSection>(() => {\n  return BUI.html`\n  <bim-panel active label="Civil 3D Navigator Tutorial" class="options-menu">\n\n      <bim-panel-section label="Alignments">\n\n         <bim-dropdown required label="Selected alignment"\n             @change="${({ target }: { target: BUI.Dropdown }) => {\n               selectedAlignment = target.value[0];\n               if (highlightSelected) {\n                 updateHighlight();\n               }\n               if (showStations) {\n                 updateStations();\n               }\n             }}">\n\n          ${alignments.children.map(() => {\n            return BUI.html`\n              <bim-option ?checked=${alignmentCounter === 0} label="${alignmentCounter++}"></bim-option>\n            `;\n          })}\n        </bim-dropdown>\n        \n        <bim-number-input\n          slider step="1" label="Highlight width" value="${navigator.highlightMaterial.linewidth}" min="1" max="10"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            navigators.highlightMaterial.linewidth = target.value;\n          }}">\n        </bim-number-input>\n\n        <bim-color-input \n          label="Highlight Color" color="#${navigators.highlightMaterial.color.getHexString()}" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            navigators.highlightMaterial.color = new THREE.Color(target.color);\n          }}">\n        </bim-color-input>\n\n        \n        <bim-color-input \n          label="Station Label Color" color="#${navigators.stationLabelColor.getHexString()}" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            navigators.stationLabelColor = new THREE.Color(target.color);\n          }}">\n        </bim-color-input>\n\n        \n        <bim-color-input \n          label="Station Label Background Color" color="#${navigators.stationLabelBackgroundColor.getHexString()}" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            navigators.stationLabelBackgroundColor = new THREE.Color(\n              target.color,\n            );\n          }}">\n        </bim-color-input>\n\n        <bim-color-input \n          label="Station Pointer Color" color="#${navigators.stationPointerColor.getHexString()}" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            navigators.stationPointerColor = new THREE.Color(target.color);\n          }}">\n        </bim-color-input>\n\n        <bim-color-input \n          label="Station Pointer Background Color" color="#${navigators.stationPointerBackgroundColor.getHexString()}" \n          @input="${({ target }: { target: BUI.ColorInput }) => {\n            navigators.stationPointerBackgroundColor = new THREE.Color(\n              target.color,\n            );\n          }}">\n        </bim-color-input>\n\n        <bim-number-input\n          slider step="0.05" label="Screen distance limit" value="${navigators.screenDistanceLimit}" min="0" max="1"\n          @change="${({ target }: { target: BUI.NumberInput }) => {\n            navigators.screenDistanceLimit = target.value;\n            navigator.updateStations();\n          }}">\n        </bim-number-input>\n\n        <bim-checkbox\n          label="Highlight selected" checked="${highlightSelected}"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            highlightSelected = target.checked;\n            updateHighlight();\n          }}">\n        </bim-checkbox>\n\n        <bim-checkbox\n          label="Show kps"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            showStations = target.checked;\n            updateStations();\n          }}">\n        </bim-checkbox>\n\n        \n        <bim-checkbox\n          label="Clip"\n          @change="${({ target }: { target: BUI.Checkbox }) => {\n            crossSectionNavigator.plane.enabled = target.checked;\n            crossSectionNavigator.sectionVisible = target.checked;\n            if (target.checked) {\n              crossSectionNavigator.update();\n              crossSectionNavigator.plane.update();\n            }\n            if (showStations) {\n              updateStations();\n            }\n          }}">\n        </bim-checkbox>\n\n        \n      <bim-checkbox\n        label="Flip"\n        @change="${({ target }: { target: BUI.Checkbox }) => {\n          crossSectionNavigator.flip = target.checked;\n          if (showStations) {\n            updateStations();\n          }\n        }}">\n      </bim-checkbox>\n\n      <bim-number-input\n      slider step="10" label="Increments" value="${navigator.increments}" min="10" max="100"\n      @change="${({ target }: { target: BUI.NumberInput }) => {\n        navigator.increments = target.value;\n        updateStations();\n      }}">\n    </bim-number-input>\n\n    <bim-number-input\n      slider step="0.01" label="Alignment navigation" value="0.5" min="0" max="1"\n      @change="${({ target }: { target: BUI.NumberInput }) => {\n        moveToPercentage(target.value);\n      }}">\n    </bim-number-input>\n\n    <bim-number-input\n      slider step="10" label="Move to KP" value="2000" min="1925" max="3000"\n      @change="${({ target }: { target: BUI.NumberInput }) => {\n        const alignment = alignments.children[selectedAlignment] as THREE.Group;\n        const length = OBF.CivilUtils.alignmentLength(alignment);\n        const localPoint = target.value - alignment.userData.initialStation;\n        const percentage = localPoint / length;\n        const normalized = Math.min(Math.max(percentage, 0), 1);\n        moveToPercentage(normalized);\n      }}">\n    </bim-number-input>\n\n    </bim-panel-section>\n\n    </bim-panel>\n    `;\n});\n\npanel.style.zIndex = "9999";\n\ndocument.body.append(panel);\n'})}),"\n",(0,o.jsx)(e.p,{children:"And we will make some logic that adds a button to the screen when the user is visiting our app from their phone, allowing to show or hide the menu. Otherwise, the menu would make the app unusable."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const button = BUI.Component.create<BUI.PanelSection>(() => {\n  return BUI.html`\n      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"\n        @click="${() => {\n          if (panel.classList.contains("options-menu-visible")) {\n            panel.classList.remove("options-menu-visible");\n          } else {\n            panel.classList.add("options-menu-visible");\n          }\n        }}">\n      </bim-button>\n    `;\n});\n\ndocument.body.append(button);\n'})}),"\n",(0,o.jsx)(e.h3,{id:"-wrap-up",children:"\ud83c\udf89 Wrap up"}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.p,{children:"That's it! You have created a 3D app that can load infra models, represent its alignment in 3D and use it to navigate around with a nice camera animation. Well done!"})]})}function g(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var o=t(6540);const a={},i=o.createContext(a);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);