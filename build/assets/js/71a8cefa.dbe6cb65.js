"use strict";(self.webpackChunkengine_docs=self.webpackChunkengine_docs||[]).push([[4899],{1828:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=t(4848),r=t(8453);const i={},s=void 0,a={id:"Tutorials/Components/Front/Outliner",title:"Outliner",description:'window.open("https://thatopen.github.io/engine_components/examples/Outliner")} >Go Full Screen',source:"@site/docs/Tutorials/Components/Front/Outliner.mdx",sourceDirName:"Tutorials/Components/Front",slug:"/Tutorials/Components/Front/Outliner",permalink:"/Tutorials/Components/Front/Outliner",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Marker",permalink:"/Tutorials/Components/Front/Marker"},next:{title:"PostproductionRenderer",permalink:"/Tutorials/Components/Front/PostproductionRenderer"}},l={},c=[{value:"\ud83d\udd26 Making Items Pop",id:"-making-items-pop",level:2},{value:"\ud83d\udd96 Importing our Libraries",id:"-importing-our-libraries",level:3},{value:"\ud83c\udf0e Setting up a Simple Scene",id:"-setting-up-a-simple-scene",level:3},{value:"\ud83d\udee0\ufe0f Setting Up Fragments",id:"\ufe0f-setting-up-fragments",level:3},{value:"\ud83d\udcc2 Loading Fragments Models",id:"-loading-fragments-models",level:3},{value:"\u2728 Using the Outliner Component",id:"-using-the-outliner-component",level:3},{value:"\ud83e\udde9 Adding some UI (optional but recommended)",id:"-adding-some-ui-optional-but-recommended",level:3},{value:"\u23f1\ufe0f Measuring the performance (optional)",id:"\ufe0f-measuring-the-performance-optional",level:3},{value:"\ud83c\udf89 Wrap up",id:"-wrap-up",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)("div",{style:{position:"relative"},children:[(0,o.jsx)("iframe",{src:"https://thatopen.github.io/engine_components/examples/Outliner"}),(0,o.jsx)("button",{class:"full-screen-btn",onClick:()=>window.open("https://thatopen.github.io/engine_components/examples/Outliner"),children:"Go Full Screen"})]}),"\n",(0,o.jsx)(n.admonition,{title:"Source",type:"info",children:(0,o.jsxs)(n.p,{children:["Copying and pasting? We've got you covered! You can find the full source code of this tutorial ",(0,o.jsx)(n.a,{href:"https://github.com/ThatOpen/engine_components/blob/main/packages/front/src/fragments/Outliner/example.ts",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"-making-items-pop",children:"\ud83d\udd26 Making Items Pop"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"-importing-our-libraries",children:"\ud83d\udd96 Importing our Libraries"}),"\n",(0,o.jsx)(n.p,{children:"First things first, let's install all necessary dependencies to make this example work:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import * as THREE from "three";\nimport Stats from "stats.js";\nimport * as OBC from "@thatopen/components";\nimport * as BUI from "@thatopen/ui";\n// You have to import * as OBF from "@thatopen/components-front"\nimport * as OBF from "../..";\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-setting-up-a-simple-scene",children:"\ud83c\udf0e Setting up a Simple Scene"}),"\n",(0,o.jsx)(n.p,{children:"To get started, let's set up a basic ThreeJS scene. This will serve as the foundation for our application and allow us to visualize the 3D models effectively:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const components = new OBC.Components();\n\nconst worlds = components.get(OBC.Worlds);\nconst world = worlds.create<\n  OBC.SimpleScene,\n  OBC.OrthoPerspectiveCamera,\n  OBF.PostproductionRenderer\n>();\n\nworld.scene = new OBC.SimpleScene(components);\nworld.scene.setup();\nworld.scene.three.background = null;\n\nconst container = document.getElementById("container")!;\nworld.renderer = new OBF.PostproductionRenderer(components, container);\nworld.camera = new OBC.OrthoPerspectiveCamera(components);\nawait world.camera.controls.setLookAt(68, 23, -8.5, 21.5, -5.5, 23);\n\ncomponents.init();\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-setting-up-fragments",children:"\ud83d\udee0\ufe0f Setting Up Fragments"}),"\n",(0,o.jsx)(n.p,{children:"Now, let's configure the FragmentsManager. This will allow us to load models effortlessly and start manipulating them with ease:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const githubUrl =\n  "https://thatopen.github.io/engine_fragment/resources/worker.mjs";\nconst fetchedUrl = await fetch(githubUrl);\nconst workerBlob = await fetchedUrl.blob();\nconst workerFile = new File([workerBlob], "worker.mjs", {\n  type: "text/javascript",\n});\nconst workerUrl = URL.createObjectURL(workerFile);\nconst fragments = components.get(OBC.FragmentsManager);\nfragments.init(workerUrl);\n\nworld.camera.controls.addEventListener("rest", () =>\n  fragments.core.update(true),\n);\n\nworld.onCameraChanged.add((camera) => {\n  for (const [, model] of fragments.list) {\n    model.useCamera(camera.three);\n  }\n  fragments.core.update(true);\n});\n\nfragments.list.onItemSet.add(({ value: model }) => {\n  model.useCamera(world.camera.three);\n  world.scene.three.add(model.object);\n  fragments.core.update(true);\n});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-loading-fragments-models",children:"\ud83d\udcc2 Loading Fragments Models"}),"\n",(0,o.jsx)(n.p,{children:"With the core setup complete, it's time to load a Fragments model into our scene. Fragments are optimized for fast loading and rendering, making them ideal for large-scale 3D models."}),"\n",(0,o.jsx)(n.admonition,{title:"Where can I find Fragment files?",type:"info",children:(0,o.jsx)(n.p,{children:"You can use the sample Fragment files available in our repository for testing. If you have an IFC model you'd like to convert to Fragments, check out the IfcImporter tutorial for detailed instructions."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const fragPaths = ["https://thatopen.github.io/engine_components/resources/frags/school_arq.frag"];\nawait Promise.all(\n  fragPaths.map(async (path) => {\n    const modelId = path.split("/").pop()?.split(".").shift();\n    if (!modelId) return null;\n    const file = await fetch(path);\n    const buffer = await file.arrayBuffer();\n    return fragments.core.load(buffer, { modelId });\n  }),\n);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-using-the-outliner-component",children:"\u2728 Using the Outliner Component"}),"\n",(0,o.jsx)(n.p,{children:"With the foundational setup complete, let's begin working with the outliner. It's incredibly straightforward, and as always, the process starts by obtaining the component instance:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const outliner = components.get(OBF.Outliner);\n"})}),"\n",(0,o.jsx)(n.p,{children:"The outliner relies on a shader used in postproduction. In practice, this means you must use the Postproduction Renderer (as demonstrated in this example) and enable it. The setup is straightforward, and you can proceed as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const { postproduction } = world.renderer;\npostproduction.enabled = true;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Once the postproduction is enabled, you can assign the same world used for postproduction to the outliner, configure it, and activate it:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'outliner.world = world;\noutliner.color = new THREE.Color(0xbcf124);\noutliner.fillColor = new THREE.Color("#9519c2");\noutliner.fillOpacity = 0.5;\n// As a best practice, enable it after it has been configured\noutliner.enabled = true;\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, the outliner is all about adding ModelIdMaps (That Open Engine's item selection representation) to it. Then, it just takes care of displaying them outlined based on the settings you have chosen. Let's take, for example, all elements matching a very simple query to then add them to the outliner:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const addDoorItems = async () => {\n  const finder = components.get(OBC.ItemsFinder);\n  const doors = await finder.getItems([{ categories: [/DOOR/] }]);\n  await outliner.addItems(doors);\n};\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Need Help?",type:"note",children:(0,o.jsx)(n.p,{children:"If you're uncertain about the previous code snippet related to finding items, please refer to the ItemsFinder example in the documentation for additional guidance."})}),"\n",(0,o.jsx)(n.p,{children:"A common approach to using the outliner is to combine it with the highlighter, allowing you to outline the selected elements. The setup can be implemented as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"components.get(OBC.Raycasters).get(world);\n\nconst highlighter = components.get(OBF.Highlighter);\nhighlighter.setup({\n  world,\n  selectMaterialDefinition: null,\n});\n\nhighlighter.events.select.onHighlight.add((modelIdMap) => {\n  outliner.addItems(modelIdMap);\n});\n\nhighlighter.events.select.onClear.add((modelIdMap) => {\n  outliner.removeItems(modelIdMap);\n});\n"})}),"\n",(0,o.jsx)(n.admonition,{title:"Highlighter?",type:"note",children:(0,o.jsx)(n.p,{children:"If you're unsure how to use the Highlighter, we recommend reviewing the corresponding tutorial in the documentation for detailed guidance."})}),"\n",(0,o.jsx)(n.p,{children:"Finally, you can clear all outlines at any time. Let's create a helper function that can be executed from the UI later:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"const clearOutlines = () => {\n  outliner.clean();\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"-adding-some-ui-optional-but-recommended",children:"\ud83e\udde9 Adding some UI (optional but recommended)"}),"\n",(0,o.jsxs)(n.p,{children:["We will use the ",(0,o.jsx)(n.code,{children:"@thatopen/ui"})," library to add some simple and cool UI elements to our app. First, we need to call the ",(0,o.jsx)(n.code,{children:"init"})," method of the ",(0,o.jsx)(n.code,{children:"BUI.Manager"})," class to initialize the library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"BUI.Manager.init();\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we will add some UI to play around with the actions in this tutorial. For more information about the UI library, you can check the specific documentation for it!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const panel = BUI.Component.create<BUI.PanelSection>(() => {\n  const onLineColorChange = ({ target }: { target: BUI.ColorInput }) => {\n    outliner.color = new THREE.Color(target.color);\n  };\n\n  const onFillColorChange = ({ target }: { target: BUI.ColorInput }) => {\n    outliner.fillColor = new THREE.Color(target.color);\n  };\n\n  const onOpacityChange = ({ target }: { target: BUI.NumberInput }) => {\n    outliner.fillOpacity = target.value;\n  };\n\n  const onThicknessChange = ({ target }: { target: BUI.NumberInput }) => {\n    outliner.thickness = target.value;\n  };\n\n  return BUI.html`\n    <bim-panel active label="Outliner Tutorial" class="options-menu">\n      <bim-panel-section label="General">\n        <bim-button @click=${clearOutlines} label="Clear Outlines"></bim-button>\n        <bim-color-input color="#${outliner.color.getHexString()}" label="Line Color" @input=${onLineColorChange}></bim-color-input>\n        <bim-color-input color="#${outliner.fillColor.getHexString()}" label="Fill Color" @input=${onFillColorChange}></bim-color-input>\n        <bim-number-input vertical value=${outliner.fillOpacity} min=0 max=1 step=0.01 slider label="Opacity" @change=${onOpacityChange}></bim-number-input>\n        <bim-number-input vertical value=${outliner.thickness} min=1 max=5 step=0.1 slider label="Thickness" @change=${onThicknessChange}></bim-number-input>\n      </bim-panel-section>\n      <bim-panel-section label="Actions">\n        <bim-button @click=${addDoorItems} label="Outline Items"></bim-button>\n      </bim-panel-section>\n    </bim-panel>\n  `;\n});\n\ndocument.body.append(panel);\n'})}),"\n",(0,o.jsx)(n.p,{children:"And we will make some logic that adds a button to the screen when the user is visiting our app from their phone, allowing to show or hide the menu. Otherwise, the menu would make the app unusable."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const button = BUI.Component.create<BUI.PanelSection>(() => {\n  return BUI.html`\n      <bim-button class="phone-menu-toggler" icon="solar:settings-bold"\n        @click="${() => {\n          if (panel.classList.contains("options-menu-visible")) {\n            panel.classList.remove("options-menu-visible");\n          } else {\n            panel.classList.add("options-menu-visible");\n          }\n        }}">\n      </bim-button>\n    `;\n});\n\ndocument.body.append(button);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"\ufe0f-measuring-the-performance-optional",children:"\u23f1\ufe0f Measuring the performance (optional)"}),"\n",(0,o.jsxs)(n.p,{children:["We'll use the ",(0,o.jsx)(n.a,{href:"https://github.com/mrdoob/stats.js",children:"Stats.js"})," to measure the performance of our app. We will add it to the top left corner of the viewport. This way, we'll make sure that the memory consumption and the FPS of our app are under control."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'const stats = new Stats();\nstats.showPanel(2);\ndocument.body.append(stats.dom);\nstats.dom.style.left = "0px";\nstats.dom.style.zIndex = "unset";\nworld.renderer.onBeforeUpdate.add(() => stats.begin());\nworld.renderer.onAfterUpdate.add(() => stats.end());\n'})}),"\n",(0,o.jsx)(n.h3,{id:"-wrap-up",children:"\ud83c\udf89 Wrap up"}),"\n",(0,o.jsx)(n.p,{children:"That's it! Now you're able to create a fully interactive 3D scene with outlines. Congratulations! Keep exploring more tutorials in the documentation to enhance your skills further."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);